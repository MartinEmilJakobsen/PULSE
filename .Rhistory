tryCatch(
tempdat[[i]] <- tibble( OLS = list(solve(t(Z)%*%Z)%*%t(Z)%*%Y),
Ful1 = list(FULLER_k(1,Y,X,A_1=A_1,n,dA,P_A) %>% K_class(.,Z=Z,Y,n,P_A)),
Ful4 = list(FULLER_k(4,Y,X,A_1=A_1,n,dA,P_A) %>% K_class(.,Z=Z,Y,n,P_A)),
PULSE05 = list(BinarySearch(Z,Y,dZ,dA,p=0.05,N=10000,n=n,YtP_AY,ZtP_AZ,YtP_AZ,YtY,ZtZ,YtZ,P_A,A_1,X))
)  %>%
gather(Type,alpha)  %>%
rowwise()  %>%
mutate(MSESample = list((alpha-truealpha)%*%t(alpha-truealpha)),
BiasSample = list(alpha- truealpha),
Gn = list(Gn))  %>%
ungroup()  ,
error = function(e) {
return(as.numeric(NA))
} )
tryCatch(
tibble( OLS = list(solve(t(Z)%*%Z)%*%t(Z)%*%Y),
Ful1 = list(FULLER_k(1,Y,X,A_1=A_1,n,dA,P_A) %>% K_class(.,Z=Z,Y,n,P_A)),
Ful4 = list(FULLER_k(4,Y,X,A_1=A_1,n,dA,P_A) %>% K_class(.,Z=Z,Y,n,P_A)),
PULSE05 = list(BinarySearch(Z,Y,dZ,dA,p=0.05,N=10000,n=n,YtP_AY,ZtP_AZ,YtP_AZ,YtY,ZtZ,YtZ,P_A,A_1,X))
)  %>%
gather(Type,alpha)  %>%
rowwise()  %>%
mutate(MSESample = list((alpha-truealpha)%*%t(alpha-truealpha)),
BiasSample = list(alpha- truealpha),
Gn = list(Gn))  %>%
ungroup()  ,
error = function(e) {
return(as.numeric(NA))
} )
tryCatch(
tibble( OLS = list(solve(t(Z)%*%Z)%*%t(Z)%*%Y),
Ful1 = list(FULLER_k(1,Y,X,A_1=A_1,n,dA,P_A) %>% K_class(.,Z=Z,Y,n,P_A)),
Ful4 = list(FULLER_k(4,Y,X,A_1=A_1,n,dA,P_A) %>% K_class(.,Z=Z,Y,n,P_A)),
PULSE05 = list(BinarySearch(Z,Y,dZ,dA,p=0.05,N=10000,n=n,YtP_AY,ZtP_AZ,YtP_AZ,YtY,ZtZ,YtZ,P_A,A_1,X))
)  %>%
gather(Type,alpha)  %>%
rowwise()  %>%
mutate(MSESample = list((alpha-truealpha)%*%t(alpha-truealpha)),
BiasSample = list(alpha- truealpha),
Gn = list(Gn))  %>%
ungroup()
temp <- 0,
error = function(e) {
return(as.numeric(NA))
} )
tryCatch(
{tibble( OLS = list(solve(t(Z)%*%Z)%*%t(Z)%*%Y),
Ful1 = list(FULLER_k(1,Y,X,A_1=A_1,n,dA,P_A) %>% K_class(.,Z=Z,Y,n,P_A)),
Ful4 = list(FULLER_k(4,Y,X,A_1=A_1,n,dA,P_A) %>% K_class(.,Z=Z,Y,n,P_A)),
PULSE05 = list(BinarySearch(Z,Y,dZ,dA,p=0.05,N=10000,n=n,YtP_AY,ZtP_AZ,YtP_AZ,YtY,ZtZ,YtZ,P_A,A_1,X))
)  %>%
gather(Type,alpha)  %>%
rowwise()  %>%
mutate(MSESample = list((alpha-truealpha)%*%t(alpha-truealpha)),
BiasSample = list(alpha- truealpha),
Gn = list(Gn))  %>%
ungroup();
temp <- 0},
error = function(e) {
return(as.numeric(NA))
} )
tempdat[[i]] <- ifelse(temp==0,0,1)
tempdat[[i]] <- ifelse(is.na(temp),0,1)
temp <- 1
tryCatch(
{tibble( OLS = list(solve(t(Z)%*%Z)%*%t(Z)%*%Y),
Ful1 = list(FULLER_k(1,Y,X,A_1=A_1,n,dA,P_A) %>% K_class(.,Z=Z,Y,n,P_A)),
Ful4 = list(FULLER_k(4,Y,X,A_1=A_1,n,dA,P_A) %>% K_class(.,Z=Z,Y,n,P_A)),
PULSE05 = list(BinarySearch(Z,Y,dZ,dA,p=0.05,N=10000,n=n,YtP_AY,ZtP_AZ,YtP_AZ,YtY,ZtZ,YtZ,P_A,A_1,X))
)  %>%
gather(Type,alpha)  %>%
rowwise()  %>%
mutate(MSESample = list((alpha-truealpha)%*%t(alpha-truealpha)),
BiasSample = list(alpha- truealpha),
Gn = list(Gn))  %>%
ungroup();
temp <- 0},
error = function(e) {
return(as.numeric(NA))
} )
tempdat[[i]] <- ifelse(is.na(temp),0,1)
tempdat[[i]]
i <- 3
source("Estimators_Fast.R")
tryCatch(
{tibble( OLS = list(solve(t(Z)%*%Z)%*%t(Z)%*%Y),
Ful1 = list(FULLER_k(1,Y,X,A_1=A_1,n,dA,P_A) %>% K_class(.,Z=Z,Y,n,P_A)),
Ful4 = list(FULLER_k(4,Y,X,A_1=A_1,n,dA,P_A) %>% K_class(.,Z=Z,Y,n,P_A)),
PULSE05 = list(BinarySearch(Z,Y,dZ,dA,p=0.05,N=10000,n=n,YtP_AY,ZtP_AZ,YtP_AZ,YtY,ZtZ,YtZ,P_A,A_1,X))
)  %>%
gather(Type,alpha)  %>%
rowwise()  %>%
mutate(MSESample = list((alpha-truealpha)%*%t(alpha-truealpha)),
BiasSample = list(alpha- truealpha),
Gn = list(Gn))  %>%
ungroup();
temp <- 0},
error = function(e) {
return(as.numeric(NA))
} )
tempdat[[i]] <- ifelse(is.na(temp),0,1)
tempdat
tibble( OLS = list(solve(t(Z)%*%Z)%*%t(Z)%*%Y),
Ful1 = list(FULLER_k(1,Y,X,A_1=A_1,n,dA,P_A) %>% K_class(.,Z=Z,Y,n,P_A)),
Ful4 = list(FULLER_k(4,Y,X,A_1=A_1,n,dA,P_A) %>% K_class(.,Z=Z,Y,n,P_A)),
PULSE05 = list(BinarySearch(Z,Y,dZ,dA,p=0.05,N=10000,n=n,YtP_AY,ZtP_AZ,YtP_AZ,YtY,ZtZ,YtZ,P_A,A_1,X))
)  %>%
gather(Type,alpha)  %>%
rowwise()  %>%
mutate(MSESample = list((alpha-truealpha)%*%t(alpha-truealpha)),
BiasSample = list(alpha- truealpha),
Gn = list(Gn))  %>%
ungroup();
temp <- 0
tempdat[[i]] <- ifelse(is.na(temp),0,1)
temp <- 1
tryCatch(
{tibble( OLS = list(solve(t(Z)%*%Z)%*%t(Z)%*%Y),
Ful1 = list(FULLER_k(1,Y,X,A_1=A_1,n,dA,P_A) %>% K_class(.,Z=Z,Y,n,P_A)),
Ful4 = list(FULLER_k(4,Y,X,A_1=A_1,n,dA,P_A) %>% K_class(.,Z=Z,Y,n,P_A)),
PULSE05 = list(BinarySearch(Z,Y,dZ,dA,p=0.05,N=10000,n=n,YtP_AY,ZtP_AZ,YtP_AZ,YtY,ZtZ,YtZ,P_A,A_1,X))
)  %>%
gather(Type,alpha)  %>%
rowwise()  %>%
mutate(MSESample = list((alpha-truealpha)%*%t(alpha-truealpha)),
BiasSample = list(alpha- truealpha),
Gn = list(Gn))  %>%
ungroup();
temp <- 0},
error = function(e) {
return(as.numeric(NA))
} )
tempdat[[i]] <- ifelse(temp==1,1,0)
tempdat
tempdat[[1]] <- 1
tempdat
Data <- bind_rows(tempdat)
tempdat
Data <- sum(tempdat)
Data <- sum(unlist(tempdat) )
Data
sum(unlist(tempdat) )
unlist(tempdat)
Data <- tible(ErrorCount = sum(unlist(tempdat) ),ModelCoefs = list(Coefs))
Data <- tibble(ErrorCount = sum(unlist(tempdat) ),ModelCoefs = list(Coefs))
Coefs <- list(xi11=xi11,
xi12=xi12,
xi21=xi21,
xi22=xi22,
delta11=delta11,
delta12=delta12,
delta21=delta21,
delta22=delta22,
mu11 = mu11,
mu22 = mu22,
VepX1 = VepX1,
VepX2 = VepX2,
rhosq = rhosq)
Data <- tibble(ErrorCount = sum(unlist(tempdat) ),ModelCoefs = list(Coefs))
Data
tryCatch(
{tibble( OLS = list(solve(t(Z)%*%Z)%*%t(Z)%*%Y),
Ful1 = list(FULLER_k(1,Y,X,A_1=A_1,n,dA,P_A) %>% K_class(.,Z=Z,Y,n,P_A)),
Ful4 = list(FULLER_k(4,Y,X,A_1=A_1,n,dA,P_A) %>% K_class(.,Z=Z,Y,n,P_A)),
PULSE05 = list(BinarySearch(Z,Y,dZ,dA,p=0.05,N=10000,n=n,YtP_AY,ZtP_AZ,YtP_AZ,YtY,ZtZ,YtZ,P_A,A_1,X))
);
temp <- 0},
error = function(e) {
return(as.numeric(NA))
} )
tempdat[[i]] <- ifelse(temp==1,1,0)
tempdat
Data <- tibble(ErrorCount = sum(unlist(tempdat) ),ModelCoefs = list(Coefs))
Data
Data %>% unnest(cols=c(ModelCoefs))
Data %>% unnest(cols=c(ModelCoefs)) %>% unnest()
Data %>% unnest(cols=c(ModelCoefs)) %>% unnest(cols=c(ModelCoefs))
Data_Location <- "Data/Experiment_Multivariate_VaryingConfounding_CountErrorModels_nSim_5000_nObsPerSim_50_nModel_10000_20200715041723.RDS"
ID <- "20200715041723"
dat <- readRDS(file=Data_Location)
dat
filter(dat,ErrorCount != 0)
filter(dat,ErrorCount != 0)
filter(dat,ErrorCount >0)
# Read data normRho = 0.2,0.8, eta =0.2,0.8
Data_Location <- "Data/Experiment_Multivariate_FixedConfounding_nSim_5000_nObsPerSim_50_nModel_5000_20200715005001.RDS"
ID <- "20200715005001"
dat <- readRDS(file=Data_Location)
#Finding MSE superior models
Optimal <- dat %>%
select(n,nModel,Type,MSE,Cov) %>%
unique() %>%
spread(Type,MSE) %>%
rowwise() %>%
mutate(TrueSuperior = case_when( min(eigen(PULSE05-Ful4)$values) > 0 ~ "Ful4",
min(eigen(Ful4-PULSE05)$values) > 0 ~ "PULSE",
TRUE ~ "Not comparable")) %>%
select(n,nModel,Cov,TrueSuperior)
library(tidyverse)
library(magrittr)
library(stringr)
library(grid)
library(gridExtra)
# Read data normRho = 0.2,0.8, eta =0.2,0.8
Data_Location <- "Data/Experiment_Multivariate_FixedConfounding_nSim_5000_nObsPerSim_50_nModel_5000_20200715005001.RDS"
ID <- "20200715005001"
dat <- readRDS(file=Data_Location)
#Finding MSE superior models
Optimal <- dat %>%
select(n,nModel,Type,MSE,Cov) %>%
unique() %>%
spread(Type,MSE) %>%
rowwise() %>%
mutate(TrueSuperior = case_when( min(eigen(PULSE05-Ful4)$values) > 0 ~ "Ful4",
min(eigen(Ful4-PULSE05)$values) > 0 ~ "PULSE",
TRUE ~ "Not comparable")) %>%
select(n,nModel,Cov,TrueSuperior)
dat
#Finding MSE superior models
Optimal <- dat %>%
select(n,nModel,Type,MSE,Cov) %>%
unique() %>%
spread(Type,MSE) %>%
rowwise() %>%
mutate(TrueSuperior = case_when( min(eigen(PULSE05-Ful4)$values) > 0 ~ "Ful4",
min(eigen(Ful4-PULSE05)$values) > 0 ~ "PULSE",
TRUE ~ "Not comparable")) %>%
select(n,nModel,Cov,TrueSuperior)
dat
dat %>%
select(n,nModel,Type,MSE,Cov)
#Finding MSE superior models
Optimal <- dat %>% selet(nModel)
#Finding MSE superior models
Optimal <- dat %>% select(nModel)
library(tidyverse)
library(magrittr)
#Finding MSE superior models
Optimal <- dat %>% select(nModel)
select
library(dplyr)
#Finding MSE superior models
Optimal <- dat %>% select(nModel)
library(tidyverse)
library(dplyr)
library(magrittr)
library(stringr)
library(grid)
library(gridExtra)
# Read data normRho = 0.2,0.8, eta =0.2,0.8
Data_Location <- "Data/Experiment_Multivariate_FixedConfounding_nSim_5000_nObsPerSim_50_nModel_5000_20200715005001.RDS"
ID <- "20200715005001"
dat <- readRDS(file=Data_Location)
#Finding MSE superior models
Optimal <- dat %>% select(nModel)
#Finding MSE superior models
Optimal <- dat %>%
select(n,nModel,Type,MSE,Cov) %>%
unique() %>%
spread(Type,MSE) %>%
rowwise() %>%
mutate(TrueSuperior = case_when( min(eigen(PULSE05-Ful4)$values) > 0 ~ "Ful4",
min(eigen(Ful4-PULSE05)$values) > 0 ~ "PULSE",
TRUE ~ "Not comparable")) %>%
select(n,nModel,Cov,TrueSuperior)
#Extracting models coefficients
Cors <- dat %>%
filter(Type=="Ful1") %>%
select(nModel,ModelCoefs,Cov) %>%
unnest(cols=c(ModelCoefs)) %>%
mutate(Coef = rep(c(
"xi11",
"xi12",
"xi21",
"xi22",
"phi1",
"phi2",
"eta"),20000)  ) %>%
unnest(cols=c(ModelCoefs)) %>%
spread(Coef,ModelCoefs) %>%
mutate(normRho = sqrt((phi1^2+phi2^2-2*eta*phi1*phi2)/(1-eta^2)))
# Calculating relative change in performance measures
LossData <- dat  %>%
select(nModel,Cov,nSim,n,Type,MeanGn,Determinant,Trace,Bias) %>%
gather(pm, Value, c("Determinant",
"Trace",
"Bias")) %>%
mutate(pm = factor(pm, levels = c("Determinant",
"Trace",
"Bias"))) %>%
spread(Type,Value) %>%
ungroup() %>%
mutate("PULSE05 to Fuller4" = pmap_dbl(.l=list(Ful4,PULSE05,pm), .f=function(Ful4,PULSE05,pm){ (Ful4-PULSE05)/PULSE05 }),
"PULSE05 to Fuller1"  = pmap_dbl(.l=list(Ful1,PULSE05,pm), .f=function(Ful1,PULSE05,pm){ (Ful1-PULSE05)/PULSE05}),
"PULSE05 to OLS"  = pmap_dbl(.l=list(OLS,PULSE05,pm), .f=function(OLS,PULSE05,pm){ (OLS-PULSE05)/PULSE05}),
MinEigenMeanGn = map_dbl(.x= MeanGn,.f= function(x) {ifelse(is.double(eigen(x)$values),min(eigen(x)$values),NA)}),
MaxEigenMeanGn = map_dbl(.x= MeanGn,.f= function(x) {ifelse(is.double(eigen(x)$values),max(eigen(x)$values),NA)})) %>%
mutate(Superior = ifelse(Ful4<PULSE05,"Ful4","PULSE")) %>%
gather(Type,Value,c(-nModel,-Cov,-nSim,-n,-MeanGn,-pm,-Ful1,-Ful4,-OLS,-PULSE05,-MinEigenMeanGn,-MaxEigenMeanGn,-Superior))
# Gathering Data for plot
PlotData <- left_join(left_join(LossData,Optimal,by=c("n","nModel","Cov")) ,Cors,by=c("nModel","Cov")) %>%
arrange(normRho,-eta) %>%
mutate(Label = paste0("'||'*rho*'||'[2]:'",sprintf("%.3f",normRho),"'~~eta:'",sprintf("%.3f",eta),"'~~phi[1]:'",sprintf("%.3f",phi1),"'~~phi[2]:'",sprintf("%.3f",phi2),"'"))
scaleFUN <- function(x) sprintf("%.2f", x)
p1 <- ggplot(data=PlotData %>% filter(Type=="PULSE05 to Fuller4",Cov %in% c(3))) +
geom_hline(yintercept =0,color="black",linetype="solid") +
geom_vline(xintercept =log(15.5),color="black",linetype="dotted") +
geom_point(aes(x=log(MinEigenMeanGn),y=Value),alpha=0.1,size=1)+
facet_wrap( Label ~ pm ,scales="free_y",ncol=3, labeller = label_parsed)+
xlab(expression(log(lambda[min](hat(E)[N](G[n])))))+
ylab(expression(paste("Relative change of performance measure")))+
theme(plot.margin = unit(c(0,0.8,0,0), "cm"))+
theme(axis.title.y = element_blank())+
theme(axis.title.x = element_blank())+ scale_y_continuous(labels=scaleFUN)
p2 <- ggplot(data=PlotData %>% filter(Type=="PULSE05 to Fuller4",Cov %in% c(2))) +
geom_hline(yintercept =0,color="black",linetype="solid") +
geom_vline(xintercept =log(15.5),color="black",linetype="dotted") +
geom_point(aes(x=log(MinEigenMeanGn),y=Value),alpha=0.1,size=1)+
facet_wrap(  Label ~ pm ,scales="free_y",ncol=3, labeller = label_parsed)+
xlab(expression(log(lambda[min](hat(E)[N](G[n])))))+
ylab(expression(paste("Relative change of performance measure")))+
theme(plot.margin = unit(c(0,0.8,0,0), "cm"))+
theme(axis.title.y = element_blank())+
theme(axis.title.x = element_blank())+ scale_y_continuous(labels=scaleFUN)
p3 <- ggplot(data=PlotData %>% filter(Type=="PULSE05 to Fuller4",Cov %in% c(4))) +
geom_hline(yintercept =0,color="black",linetype="solid") +
geom_vline(xintercept =log(15.5),color="black",linetype="dotted") +
geom_point(aes(x=log(MinEigenMeanGn),y=Value),alpha=0.1,size=1)+
facet_wrap(  Label ~ pm ,scales="free_y",ncol=3, labeller = label_parsed)+
xlab(expression(log(lambda[min](hat(E)[N](G[n])))))+
ylab(expression(paste("Relative change of performance measure")))+
theme(plot.margin = unit(c(0,0.8,0,0), "cm"))+
theme(axis.title.y = element_blank())+
theme(axis.title.x = element_blank())+ scale_y_continuous(labels=scaleFUN)
p4 <- ggplot(data=PlotData %>% filter(Type=="PULSE05 to Fuller4",Cov %in% c(1))) +
geom_hline(yintercept =0,color="black",linetype="solid") +
geom_vline(xintercept =log(15.5),color="black",linetype="dotted") +
geom_point(aes(x=log(MinEigenMeanGn),y=Value),alpha=0.1,size=1)+
facet_wrap(  Label ~ pm ,scales="free_y",ncol=3, labeller = label_parsed)+
xlab(expression(log(lambda[min](hat(E)[N](G[n])))))+
ylab(expression(paste("Relative change of performance measure")))+
theme(plot.margin = unit(c(0,0.8,0,0), "cm"))+ theme(axis.title.y = element_blank())+ scale_y_continuous(labels=scaleFUN)
plot <- arrangeGrob(p1,p2,p3,p4, ncol=1,left = textGrob("Relative Change in Performance Measure", rot = 90, vjust = 0))
ggsave(paste0("Plots/Multivariate_FixedConfounding_",ID,".png"), plot =plot, device = NULL, path = NULL,
scale = 1, width = 12, height = 18, units = c("in"),
dpi = 200, limitsize = FALSE)
# Percentage Better
left_join(
LossData %>% filter(Ful4>= PULSE05) %>% select(Cov,pm,nModel,Type)  %>% group_by(Cov,pm,Type) %>% summarise(Better=n()) %>% select(-Type) %>% unique(),
LossData %>% filter(PULSE05>= Ful4) %>% select(Cov,pm,nModel,Type)  %>% group_by(Cov,pm,Type) %>% summarise(Worse=n())%>% select(-Type) %>% unique(),
by = c("Cov","pm")) %>%
mutate(sum = Better+Worse, fractionBetter = round(100*Better/5000,2)) %>% arrange(pm)
Optimal %>% group_by(TrueSuperior) %>%  summarise(count = n())
CovStructure <- data.frame(
phi1 = c(0.1897366597,  0.1549193338, 0.7589466387,  0.6196773353),
phi2 = c(0.1897366597,  0.1549193338, 0.7589466387,  0.6196773353),
eta =  c(0.8,           0.2,          0.8,           0.2)
) %>%  mutate(RhoNorm = sqrt((phi1^2+phi2^2-2*eta*phi1*phi2)/(1-eta^2)))
CovStructure
p1 <- ggplot(data=PlotData %>% filter(Type=="PULSE05 to Fuller4",Cov %in% c(1))) +
geom_hline(yintercept =0,color="black",linetype="solid") +
geom_vline(xintercept =log(15.5),color="black",linetype="dotted") +
geom_point(aes(x=log(MinEigenMeanGn),y=Value),alpha=0.1,size=1)+
facet_wrap( Label ~ pm ,scales="free_y",ncol=3, labeller = label_parsed)+
xlab(expression(log(lambda[min](hat(E)[N](G[n])))))+
ylab(expression(paste("Relative change of performance measure")))+
theme(plot.margin = unit(c(0,0.8,0,0), "cm"))+
theme(axis.title.y = element_blank())+
theme(axis.title.x = element_blank())+ scale_y_continuous(labels=scaleFUN)
p2 <- ggplot(data=PlotData %>% filter(Type=="PULSE05 to Fuller4",Cov %in% c(2))) +
geom_hline(yintercept =0,color="black",linetype="solid") +
geom_vline(xintercept =log(15.5),color="black",linetype="dotted") +
geom_point(aes(x=log(MinEigenMeanGn),y=Value),alpha=0.1,size=1)+
facet_wrap(  Label ~ pm ,scales="free_y",ncol=3, labeller = label_parsed)+
xlab(expression(log(lambda[min](hat(E)[N](G[n])))))+
ylab(expression(paste("Relative change of performance measure")))+
theme(plot.margin = unit(c(0,0.8,0,0), "cm"))+
theme(axis.title.y = element_blank())+
theme(axis.title.x = element_blank())+ scale_y_continuous(labels=scaleFUN)
p3 <- ggplot(data=PlotData %>% filter(Type=="PULSE05 to Fuller4",Cov %in% c(3))) +
geom_hline(yintercept =0,color="black",linetype="solid") +
geom_vline(xintercept =log(15.5),color="black",linetype="dotted") +
geom_point(aes(x=log(MinEigenMeanGn),y=Value),alpha=0.1,size=1)+
facet_wrap(  Label ~ pm ,scales="free_y",ncol=3, labeller = label_parsed)+
xlab(expression(log(lambda[min](hat(E)[N](G[n])))))+
ylab(expression(paste("Relative change of performance measure")))+
theme(plot.margin = unit(c(0,0.8,0,0), "cm"))+
theme(axis.title.y = element_blank())+
theme(axis.title.x = element_blank())+ scale_y_continuous(labels=scaleFUN)
p4 <- ggplot(data=PlotData %>% filter(Type=="PULSE05 to Fuller4",Cov %in% c(4))) +
geom_hline(yintercept =0,color="black",linetype="solid") +
geom_vline(xintercept =log(15.5),color="black",linetype="dotted") +
geom_point(aes(x=log(MinEigenMeanGn),y=Value),alpha=0.1,size=1)+
facet_wrap(  Label ~ pm ,scales="free_y",ncol=3, labeller = label_parsed)+
xlab(expression(log(lambda[min](hat(E)[N](G[n])))))+
ylab(expression(paste("Relative change of performance measure")))+
theme(plot.margin = unit(c(0,0.8,0,0), "cm"))+ theme(axis.title.y = element_blank())+ scale_y_continuous(labels=scaleFUN)
plot <- arrangeGrob(p1,p2,p3,p4, ncol=1,left = textGrob("Relative Change in Performance Measure", rot = 90, vjust = 0))
ggsave(paste0("Plots/Multivariate_FixedConfounding_",ID,".png"), plot =plot, device = NULL, path = NULL,
scale = 1, width = 12, height = 18, units = c("in"),
dpi = 200, limitsize = FALSE)
# Percentage Better
left_join(
LossData %>% filter(Ful4>= PULSE05) %>% select(Cov,pm,nModel,Type)  %>% group_by(Cov,pm,Type) %>% summarise(Better=n()) %>% select(-Type) %>% unique(),
LossData %>% filter(PULSE05>= Ful4) %>% select(Cov,pm,nModel,Type)  %>% group_by(Cov,pm,Type) %>% summarise(Worse=n())%>% select(-Type) %>% unique(),
by = c("Cov","pm")) %>%
mutate(sum = Better+Worse, fractionBetter = round(100*Better/5000,2)) %>% arrange(pm)
LossData
Cors
# Percentage Better
left_join(
LossData %>% filter(Ful4>= PULSE05) %>% select(Cov,pm,nModel,Type)  %>% group_by(Cov,pm,Type) %>% summarise(Better=n()) %>% select(-Type) %>% unique(),
LossData %>% filter(PULSE05>= Ful4) %>% select(Cov,pm,nModel,Type)  %>% group_by(Cov,pm,Type) %>% summarise(Worse=n())%>% select(-Type) %>% unique(),
by = c("Cov","pm")) %>%
mutate(sum = Better+Worse, fractionBetter = round(100*Better/5000,2)) %>% arrange(pm)
Cors
LossData %>% filter(Ful4>= PULSE05) %>% select(Cov,pm,nModel,Type)  %>% group_by(Cov,pm,Type) %>% summarise(Better=n()) %>% select(-Type) %>% unique(),
LossData %>% filter(PULSE05>= Ful4) %>% select(Cov,pm,nModel,Type)  %>% group_by(Cov,pm,Type) %>% summarise(Worse=n())%>% select(-Type) %>% unique(),
by = c("Cov","pm")) %>%
mutate(sum = Better+Worse, fractionBetter = round(100*Better/5000,2)) %>% arrange(pm) %>%
left_join(Cors %>%  filter(nModel==1),by="Cov")
# Percentage Better
left_join(
LossData %>% filter(Ful4>= PULSE05) %>% select(Cov,pm,nModel,Type)  %>% group_by(Cov,pm,Type) %>% summarise(Better=n()) %>% select(-Type) %>% unique(),
LossData %>% filter(PULSE05>= Ful4) %>% select(Cov,pm,nModel,Type)  %>% group_by(Cov,pm,Type) %>% summarise(Worse=n())%>% select(-Type) %>% unique(),
by = c("Cov","pm")) %>%
mutate(sum = Better+Worse, fractionBetter = round(100*Better/5000,2)) %>% arrange(pm) %>%
left_join(Cors %>%  filter(nModel==1),by="Cov")
# Percentage Better
left_join(
LossData %>% filter(Ful4>= PULSE05) %>% select(Cov,pm,nModel,Type)  %>% group_by(Cov,pm,Type) %>% summarise(Better=n()) %>% select(-Type) %>% unique(),
LossData %>% filter(PULSE05>= Ful4) %>% select(Cov,pm,nModel,Type)  %>% group_by(Cov,pm,Type) %>% summarise(Worse=n())%>% select(-Type) %>% unique(),
by = c("Cov","pm")) %>%
mutate(sum = Better+Worse, fractionBetter = round(100*Better/5000,2)) %>% arrange(pm) %>%
left_join(Cors %>%  filter(nModel==1),by="Cov")
# Percentage Better
left_join(
LossData %>% filter(Ful4>= PULSE05) %>% select(Cov,pm,nModel,Type)  %>% group_by(Cov,pm,Type) %>% summarise(Better=n()) %>% select(-Type) %>% unique(),
LossData %>% filter(PULSE05>= Ful4) %>% select(Cov,pm,nModel,Type)  %>% group_by(Cov,pm,Type) %>% summarise(Worse=n())%>% select(-Type) %>% unique(),
by = c("Cov","pm")) %>%
mutate(sum = Better+Worse, fractionBetter = round(100*Better/5000,2)) %>% arrange(pm) %>%
left_join(Cors %>%  filter(nModel==1),by="Cov")
# Read data
Data_Location <- "Data/Experiment_Multivariate_VaryingConfounding_Beta11_PULSE05_nSim_5000_nObsPerSim_50_nModel_10000_20200715005101.RDS"
ID <- "20200715005101"
dat <- readRDS(file=Data_Location)
Optimal <- dat %>%
select(n,nModel,Type,MSE) %>%
unique() %>%
spread(Type,MSE) %>%
rowwise() %>%
mutate(TrueSuperior = case_when( min(eigen(PULSE05-Ful4)$values) > 0 ~ "Ful4",
min(eigen(Ful4-PULSE05)$values) > 0 ~ "PULSE05",
TRUE ~ "Not comparable")) %>%
select(n,nModel,TrueSuperior)
Rhosq <- dat %>%
filter(Type=="Ful1") %>%
select(nModel,ModelCoefs) %>%
unnest(cols=c(ModelCoefs)) %>%
mutate(Coef = rep(c(
"xi11",
"xi12",
"xi21",
"xi22",
"delta11",
"delta12",
"delta21",
"delta22",
"mu11",
"mu22",
"VepX1" ,
"VepX2" ,
"rhosq"),10000)
) %>%
filter(Coef=="rhosq") %>%
unnest(cols=c(ModelCoefs))
names(Rhosq) <- c("nModel","RhoSq","t")
Rhosq <- Rhosq %>%  mutate(RhoSq= as.numeric(RhoSq)) %>% select(-t)
LossData <- dat  %>%
select(nModel,nSim,n,Type,MeanGn,Determinant,Trace,Bias) %>%
gather(pm, Value, c("Determinant",
"Trace",
"Bias")) %>%
mutate(pm = factor(pm, levels = c("Determinant",
"Trace",
"Bias"))) %>%
spread(Type,Value) %>%
ungroup() %>%
mutate("PULSE05 to Fuller4" = pmap_dbl(.l=list(Ful4,PULSE05,pm), .f=function(Ful4,PULSE05,pm){ (Ful4-PULSE05)/PULSE05 }),
"PULSE05 to Fuller1"  = pmap_dbl(.l=list(Ful1,PULSE05,pm), .f=function(Ful1,PULSE05,pm){ (Ful1-PULSE05)/PULSE05}),
"PULSE05 to OLS"  = pmap_dbl(.l=list(OLS,PULSE05,pm), .f=function(OLS,PULSE05,pm){ (OLS-PULSE05)/PULSE05}),
MinEigenMeanGn = map_dbl(.x= MeanGn,.f= function(x) {ifelse(is.double(eigen(x)$values),min(eigen(x)$values),NA)}),
MaxEigenMeanGn = map_dbl(.x= MeanGn,.f= function(x) {ifelse(is.double(eigen(x)$values),max(eigen(x)$values),NA)})) %>%
mutate(Superior = ifelse(Ful4<PULSE05,"Ful4","PULSE")) %>%
gather(Type,Value,c(-nModel,-nSim,-n,-MeanGn,-pm,-Ful1,-Ful4,-OLS,-PULSE05,-MinEigenMeanGn,-MaxEigenMeanGn,-Superior))
Optimal %>% group_by(TrueSuperior) %>%  summarise(count = n())
PlotData <- left_join(left_join(LossData,Optimal,by=c("n","nModel")) ,Rhosq,by=c("nModel"))
ggplot(data=PlotData) +
geom_hline(yintercept =0,color="black",linetype="solid") +
geom_vline(xintercept =log(15.5),color="black",linetype="dotted") +
geom_point(aes(x=log(MinEigenMeanGn),y=Value,color=sqrt(RhoSq)),alpha=0.5,size=0.8)+
scale_color_gradient(low = "blue", high = "orange")+
facet_wrap(    Type ~ pm ,scales="free_y",ncol=3, labeller = label_both)+
xlab(expression(log(lambda[min](hat(E)[N](G[n])))))+
labs(colour=expression("||"*rho*"||"[2]))+
ylab(expression(paste("Relative change of performance measure")))+
theme(plot.margin = unit(c(0,0.8,0,0), "cm"))+
theme(legend.position="bottom")
ggsave(paste0("Plots/Multivariate_VaryingConfounding_Beta11_PULSE05_",ID,".png"), plot = last_plot(), device = NULL, path = NULL,
scale = 1, width = 12, height = 9, units = c("in"),
dpi = 200, limitsize = FALSE)
