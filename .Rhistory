# Read data
Data_Location <- "Data/Experiment_Multivariate_VaryingConfounding_Beta00_PULSE05_nSim_5000_nObsPerSim_50_nModel_10000_20200714024302.RDS"
ID <- "20200714024302"
dat <- readRDS(file=Data_Location)
# Calculating MSE superiority percentages
Optimal <- dat %>%
select(n,nModel,Type,MSE) %>%
unique() %>%
spread(Type,MSE) %>%
rowwise() %>%
mutate(TrueSuperior = case_when( min(eigen(PULSE05-Ful4)$values) > 0 ~ "Ful4",
min(eigen(Ful4-PULSE05)$values) > 0 ~ "PULSE05",
TRUE ~ "Not comparable"),
TrueSuperiorVsFul1 = case_when( min(eigen(PULSE05-Ful1)$values) > 0 ~ "Ful1",
min(eigen(Ful1-PULSE05)$values) > 0 ~ "PULSE05",
TRUE ~ "Not comparable"),
TrueSuperiorVsOLS = case_when( min(eigen(PULSE05-OLS)$values) > 0 ~ "OLS",
min(eigen(OLS-PULSE05)$values) > 0 ~ "PULSE05",
TRUE ~ "Not comparable")) %>%
select(n,nModel,TrueSuperior,TrueSuperiorVsFul1,TrueSuperiorVsOLS)
library(tidyverse)
library(magrittr)
library(stringr)
library(gridExtra)
# Read data
Data_Location <- "Data/Experiment_Multivariate_VaryingConfounding_Beta00_PULSE05_nSim_5000_nObsPerSim_50_nModel_10000_20200714024302.RDS"
ID <- "20200714024302"
dat <- readRDS(file=Data_Location)
# Calculating MSE superiority percentages
Optimal <- dat %>%
select(n,nModel,Type,MSE) %>%
unique() %>%
spread(Type,MSE) %>%
rowwise() %>%
mutate(TrueSuperior = case_when( min(eigen(PULSE05-Ful4)$values) > 0 ~ "Ful4",
min(eigen(Ful4-PULSE05)$values) > 0 ~ "PULSE05",
TRUE ~ "Not comparable"),
TrueSuperiorVsFul1 = case_when( min(eigen(PULSE05-Ful1)$values) > 0 ~ "Ful1",
min(eigen(Ful1-PULSE05)$values) > 0 ~ "PULSE05",
TRUE ~ "Not comparable"),
TrueSuperiorVsOLS = case_when( min(eigen(PULSE05-OLS)$values) > 0 ~ "OLS",
min(eigen(OLS-PULSE05)$values) > 0 ~ "PULSE05",
TRUE ~ "Not comparable")) %>%
select(n,nModel,TrueSuperior,TrueSuperiorVsFul1,TrueSuperiorVsOLS)
Ful4 <- Optimal %>%
group_by(TrueSuperior) %>%
summarise(count = n()) %>%
spread(TrueSuperior,count)
Ful1 <- Optimal %>%
group_by(TrueSuperiorVsFul1) %>%
summarise(count = n()) %>%
spread(TrueSuperiorVsFul1,count)
OLS <- Optimal %>%
group_by(TrueSuperiorVsOLS) %>%
summarise(count = n()) %>%
spread(TrueSuperiorVsOLS,count)
bind_rows(Ful4,Ful1,OLS) %>%
mutate_all(.funs=function(x){round(100*x/10000,1)}) %>%
mutate_all(~replace(., is.na(.), 0.0))
# Saving only the MSE superiority versus Fuller(4)
Optimal <- Optimal %>%
select(n,nModel,TrueSuperior)
# Extracting Model Coefficients from data
Coefs <- dat %>%
filter(Type=="Ful1") %>%
select(nModel,ModelCoefs) %>%
unnest(cols=c(ModelCoefs)) %>%
mutate(Coef = rep(c(
"xi11",
"xi12",
"xi21",
"xi22",
"delta11",
"delta12",
"delta21",
"delta22",
"mu11",
"mu22",
"VepX1" ,
"VepX2" ,
"rhosq"),10000)
) %>%
unnest(cols=c(ModelCoefs)) %>%
spread(Coef,ModelCoefs) %>%
rename(RhoSq=rhosq)
ModelDataForSave <- Coefs %>% filter(nModel %in% {Optimal %>% filter(TrueSuperior=="PULSE05") %$% nModel} )
ModelDataForSave
# Read data
Data_Location <- "Data/Experiment_Multivariate_VaryingConfounding_Beta00_PULSE05_nSim_5000_nObsPerSim_50_nModel_10000_20200714024302.RDS"
ID <- "20200714024302"
dat <- readRDS(file=Data_Location)
# Finding models where PULSE is MSE superior to Fuller(4)
Optimal <- dat %>%
select(n,nModel,Type,MSE) %>%
unique() %>%
spread(Type,MSE) %>%
rowwise() %>%
mutate(TrueSuperior = case_when( min(eigen(PULSE05-Ful4)$values) > 0 ~ "Ful4",
min(eigen(Ful4-PULSE05)$values) > 0 ~ "PULSE05",
TRUE ~ "Not comparable")) %>%
select(n,nModel,TrueSuperior)
# Extracting Model Coefficients from data
Coefs <- dat %>%
filter(Type=="Ful1") %>%
select(nModel,ModelCoefs) %>%
unnest(cols=c(ModelCoefs)) %>%
mutate(Coef = rep(c(
"xi11",
"xi12",
"xi21",
"xi22",
"delta11",
"delta12",
"delta21",
"delta22",
"mu11",
"mu22",
"VepX1" ,
"VepX2" ,
"rhosq"),10000)
) %>%
unnest(cols=c(ModelCoefs)) %>%
spread(Coef,ModelCoefs) %>%
rename(RhoSq=rhosq)
LossData <- dat  %>%
select(nModel,nSim,n,Type,MeanGn,Determinant,Trace,Bias) %>%
gather(pm, Value, c("Determinant",
"Trace",
"Bias")) %>%
mutate(pm = factor(pm, levels = c("Determinant",
"Trace",
"Bias"))) %>%
spread(Type,Value) %>%
ungroup() %>%
mutate("PULSE05 to Fuller4" = pmap_dbl(.l=list(Ful4,PULSE05,pm), .f=function(Ful4,PULSE05,pm){ (Ful4-PULSE05)/PULSE05 }),
"PULSE05 to Fuller1"  = pmap_dbl(.l=list(Ful1,PULSE05,pm), .f=function(Ful1,PULSE05,pm){ (Ful1-PULSE05)/PULSE05}),
"PULSE05 to OLS"  = pmap_dbl(.l=list(OLS,PULSE05,pm), .f=function(OLS,PULSE05,pm){ (OLS-PULSE05)/PULSE05}),
MinEigenMeanGn = map_dbl(.x= MeanGn,.f= function(x) {ifelse(is.double(eigen(x)$values),min(eigen(x)$values),NA)}),
MaxEigenMeanGn = map_dbl(.x= MeanGn,.f= function(x) {ifelse(is.double(eigen(x)$values),max(eigen(x)$values),NA)})) %>%
mutate(Superior = ifelse(Ful4<PULSE05,"Ful4","PULSE")) %>%
gather(Type,Value,c(-nModel,-nSim,-n,-MeanGn,-pm,-Ful1,-Ful4,-OLS,-PULSE05,-MinEigenMeanGn,-MaxEigenMeanGn,-Superior))
PlotData <- left_join(left_join(LossData,Optimal,by=c("n","nModel")) ,Coefs,by=c("nModel"))
ggplot(data=PlotData) +
geom_hline(yintercept =0,color="black",linetype="solid") +
geom_vline(xintercept =log(15.5),color="black",linetype="dotted") +
geom_point(aes(x=log(MinEigenMeanGn),y=Value,color=sqrt(RhoSq)),alpha=0.5,size=0.8)+
scale_color_gradient(low = "blue", high = "orange")+
facet_wrap(    Type ~ pm ,scales="free_y",ncol=3, labeller = label_both)+
xlab(expression(log(lambda[min](hat(E)[N](G[n])))))+
labs(colour=expression("||"*rho*"||"[2]))+
ylab(expression(paste("Relative change of performance measure")))+
theme(plot.margin = unit(c(0,0.8,0,0), "cm"))+
theme(legend.position="bottom")
ggsave(paste0("Plots/Multivariate_VaryingConfounding_Beta00_PULSE05",ID,".png"), plot = last_plot(), device = NULL, path = NULL,
scale = 1, width = 12, height = 9, units = c("in"),
dpi = 200, limitsize = FALSE)
# Read data
Data_Location <- "Data/Experiment_Multivariate_VaryingConfounding_Beta00_PULSE05_nSim_5000_nObsPerSim_50_nModel_10000_20200714024302.RDS"
ID <- "20200714024302"
dat <- readRDS(file=Data_Location)
# Calculating MSE superiority percentages
Optimal <- dat %>%
select(n,nModel,Type,MSE) %>%
unique() %>%
spread(Type,MSE) %>%
rowwise() %>%
mutate(TrueSuperior = case_when( min(eigen(PULSE05-Ful4)$values) > 0 ~ "Ful4",
min(eigen(Ful4-PULSE05)$values) > 0 ~ "PULSE05",
TRUE ~ "Not comparable"),
TrueSuperiorVsFul1 = case_when( min(eigen(PULSE05-Ful1)$values) > 0 ~ "Ful1",
min(eigen(Ful1-PULSE05)$values) > 0 ~ "PULSE05",
TRUE ~ "Not comparable"),
TrueSuperiorVsOLS = case_when( min(eigen(PULSE05-OLS)$values) > 0 ~ "OLS",
min(eigen(OLS-PULSE05)$values) > 0 ~ "PULSE05",
TRUE ~ "Not comparable")) %>%
select(n,nModel,TrueSuperior,TrueSuperiorVsFul1,TrueSuperiorVsOLS)
Ful4 <- Optimal %>%
group_by(TrueSuperior) %>%
summarise(count = n()) %>%
spread(TrueSuperior,count)
Ful1 <- Optimal %>%
group_by(TrueSuperiorVsFul1) %>%
summarise(count = n()) %>%
spread(TrueSuperiorVsFul1,count)
OLS <- Optimal %>%
group_by(TrueSuperiorVsOLS) %>%
summarise(count = n()) %>%
spread(TrueSuperiorVsOLS,count)
bind_rows(Ful4,Ful1,OLS) %>%
mutate_all(.funs=function(x){round(100*x/10000,1)}) %>%
mutate_all(~replace(., is.na(.), 0.0))
# Saving only the MSE superiority versus Fuller(4)
Optimal <- Optimal %>%
select(n,nModel,TrueSuperior)
# Extracting Model Coefficients from data
Coefs <- dat %>%
filter(Type=="Ful1") %>%
select(nModel,ModelCoefs) %>%
unnest(cols=c(ModelCoefs)) %>%
mutate(Coef = rep(c(
"xi11",
"xi12",
"xi21",
"xi22",
"delta11",
"delta12",
"delta21",
"delta22",
"mu11",
"mu22",
"VepX1" ,
"VepX2" ,
"rhosq"),10000)
) %>%
unnest(cols=c(ModelCoefs)) %>%
spread(Coef,ModelCoefs) %>%
rename(RhoSq=rhosq)
ModelDataForSave <- Coefs %>% filter(nModel %in% {Optimal %>% filter(TrueSuperior=="PULSE05") %$% nModel} )
saveRDS(ModelDataForSave,file="VaryingConfounding_MSESuperiorModelData.RDS")
saveRDS(ModelDataForSave,file="Data/VaryingConfounding_MSESuperiorModelData.RDS")
saveRDS(ModelDataForSave,file=paste0("Data/VaryingConfounding_MSESuperiorModelData",ID,".RDS"))
saveRDS(ModelDataForSave,file=paste0("Data/VaryingConfounding_MSESuperiorModelData_",ID,".RDS"))
