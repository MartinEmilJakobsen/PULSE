"PULSE10 to Fuller1"  = pmap_dbl(.l=list(Ful1,PULSE10,pm), .f=function(Ful1,PULSE10,pm){ (Ful1-PULSE10)/PULSE10}),
"PULSE10 to OLS"  = pmap_dbl(.l=list(OLS,PULSE10,pm), .f=function(OLS,PULSE10,pm){ (OLS-PULSE10)/PULSE10}),
MinEigenMeanGn = map_dbl(.x= MeanGn,.f= function(x) {ifelse(is.double(eigen(x)$values),min(eigen(x)$values),NA)}),
MaxEigenMeanGn = map_dbl(.x= MeanGn,.f= function(x) {ifelse(is.double(eigen(x)$values),max(eigen(x)$values),NA)})) %>%
mutate(Superior = ifelse(Ful4<PULSE10,"Ful4","PULSE")) %>%
gather(Type,Value,c(-nModel,-nSim,-n,-MeanGn,-pm,-Ful1,-Ful4,-OLS,-PULSE10,-MinEigenMeanGn,-MaxEigenMeanGn,-Superior))
PlotData <- left_join(left_join(LossData,Optimal,by=c("n","nModel")) ,Rhosq,by=c("nModel"))
ggplot(data=PlotData) +
geom_hline(yintercept =0,color="black",linetype="solid") +
geom_vline(xintercept =log(15.5),color="black",linetype="dotted") +
geom_point(aes(x=log(MinEigenMeanGn),y=Value,color=sqrt(RhoSq)),alpha=0.5,size=0.8)+
scale_color_gradient(low = "blue", high = "orange")+
facet_wrap(    Type ~ pm ,scales="free_y",ncol=3, labeller = label_both)+
xlab(expression(log(lambda[min](hat(E)[N](G[n])))))+
labs(colour=expression("||"*rho*"||"[2]))+
ylab(expression(paste("Relative change of performance measure")))+
theme(plot.margin = unit(c(0,0.8,0,0), "cm"))+
theme(legend.position="bottom")
ggsave(paste0("Plots/Multivariate_VaryingConfounding_Beta00_PULSE10_",ID,".png"), plot = last_plot(), device = NULL, path = NULL,
scale = 1, width = 12, height = 9, units = c("in"),
dpi = 200, limitsize = FALSE)
ggsave(paste0("Plots/Multivariate_VaryingConfounding_Beta00_PULSE10_",ID,".eps"), plot = last_plot(), device = cairo_ps, path = NULL,
scale = 1, width = 12, height = 9, units = c("in"),
dpi = 200, limitsize = FALSE)
# Read data
Data_Location <- "Data/Experiment_Multivariate_VaryingConfounding_Beta11_PULSE05_nSim_5000_nObsPerSim_50_nModel_10000_20200716180808.RDS"
ID <- "20200716180808"
dat <- readRDS(file=Data_Location)
Optimal <- dat %>%
select(n,nModel,Type,MSE) %>%
unique() %>%
spread(Type,MSE) %>%
rowwise() %>%
mutate(TrueSuperior = case_when( min(eigen(PULSE05-Ful4)$values) > 0 ~ "Ful4",
min(eigen(Ful4-PULSE05)$values) > 0 ~ "PULSE05",
TRUE ~ "Not comparable")) %>%
select(n,nModel,TrueSuperior)
Rhosq <- dat %>%
filter(Type=="Ful1") %>%
select(nModel,ModelCoefs) %>%
unnest(cols=c(ModelCoefs)) %>%
mutate(Coef = rep(c(
"xi11",
"xi12",
"xi21",
"xi22",
"delta11",
"delta12",
"delta21",
"delta22",
"mu11",
"mu22",
"VepX1" ,
"VepX2" ,
"rhosq"),10000)
) %>%
filter(Coef=="rhosq") %>%
unnest(cols=c(ModelCoefs))
names(Rhosq) <- c("nModel","RhoSq","t")
Rhosq <- Rhosq %>%  mutate(RhoSq= as.numeric(RhoSq)) %>% select(-t)
LossData <- dat  %>%
select(nModel,nSim,n,Type,MeanGn,Determinant,Trace,Bias) %>%
gather(pm, Value, c("Determinant",
"Trace",
"Bias")) %>%
mutate(pm = factor(pm, levels = c("Determinant",
"Trace",
"Bias"))) %>%
spread(Type,Value) %>%
ungroup() %>%
mutate("PULSE05 to Fuller4" = pmap_dbl(.l=list(Ful4,PULSE05,pm), .f=function(Ful4,PULSE05,pm){ (Ful4-PULSE05)/PULSE05 }),
"PULSE05 to Fuller1"  = pmap_dbl(.l=list(Ful1,PULSE05,pm), .f=function(Ful1,PULSE05,pm){ (Ful1-PULSE05)/PULSE05}),
"PULSE05 to OLS"  = pmap_dbl(.l=list(OLS,PULSE05,pm), .f=function(OLS,PULSE05,pm){ (OLS-PULSE05)/PULSE05}),
MinEigenMeanGn = map_dbl(.x= MeanGn,.f= function(x) {ifelse(is.double(eigen(x)$values),min(eigen(x)$values),NA)}),
MaxEigenMeanGn = map_dbl(.x= MeanGn,.f= function(x) {ifelse(is.double(eigen(x)$values),max(eigen(x)$values),NA)})) %>%
mutate(Superior = ifelse(Ful4<PULSE05,"Ful4","PULSE")) %>%
gather(Type,Value,c(-nModel,-nSim,-n,-MeanGn,-pm,-Ful1,-Ful4,-OLS,-PULSE05,-MinEigenMeanGn,-MaxEigenMeanGn,-Superior))
Optimal %>% group_by(TrueSuperior) %>%  summarise(count = n())
PlotData <- left_join(left_join(LossData,Optimal,by=c("n","nModel")) ,Rhosq,by=c("nModel"))
ggplot(data=PlotData) +
geom_hline(yintercept =0,color="black",linetype="solid") +
geom_vline(xintercept =log(15.5),color="black",linetype="dotted") +
geom_point(aes(x=log(MinEigenMeanGn),y=Value,color=sqrt(RhoSq)),alpha=0.5,size=0.8)+
scale_color_gradient(low = "blue", high = "orange")+
facet_wrap(    Type ~ pm ,scales="free_y",ncol=3, labeller = label_both)+
xlab(expression(log(lambda[min](hat(E)[N](G[n])))))+
labs(colour=expression("||"*rho*"||"[2]))+
ylab(expression(paste("Relative change of performance measure")))+
theme(plot.margin = unit(c(0,0.8,0,0), "cm"))+
theme(legend.position="bottom")
ggsave(paste0("Plots/Multivariate_VaryingConfounding_Beta11_PULSE05_",ID,".png"), plot = last_plot(), device = NULL, path = NULL,
scale = 1, width = 12, height = 9, units = c("in"),
dpi = 200, limitsize = FALSE)
ggsave(paste0("Plots/Multivariate_VaryingConfounding_Beta11_PULSE05_",ID,".eps"), plot = last_plot(), device = cairo_ps, path = NULL,
scale = 1, width = 12, height = 9, units = c("in"),
dpi = 200, limitsize = FALSE)
# Read data
Data_Location <- "Data/Experiment_Multivariate_VaryingConfounding_Beta-11_PULSE05_nSim_5000_nObsPerSim_50_nModel_10000_20200716033957.RDS"
ID <- "20200716033957"
dat <- readRDS(file=Data_Location)
# Find Optimal Models
Optimal <- dat %>%
select(n,nModel,Type,MSE) %>%
unique() %>%
spread(Type,MSE) %>%
rowwise() %>%
mutate(TrueSuperior = case_when( min(eigen(PULSE05-Ful4)$values) > 0 ~ "Ful4",
min(eigen(Ful4-PULSE05)$values) > 0 ~ "PULSE05",
TRUE ~ "Not comparable")) %>%
select(n,nModel,TrueSuperior)
# Extract coefficients
Rhosq <- dat %>%
filter(Type=="Ful1") %>%
select(nModel,ModelCoefs) %>%
unnest(cols=c(ModelCoefs)) %>%
mutate(Coef = rep(c(
"xi11",
"xi12",
"xi21",
"xi22",
"delta11",
"delta12",
"delta21",
"delta22",
"mu11",
"mu22",
"VepX1" ,
"VepX2" ,
"rhosq"),10000)
) %>%
filter(Coef=="rhosq") %>%
unnest(cols=c(ModelCoefs))
names(Rhosq) <- c("nModel","RhoSq","t")
Rhosq <- Rhosq %>%  mutate(RhoSq= as.numeric(RhoSq)) %>% select(-t)
LossData <- dat  %>%
select(nModel,nSim,n,Type,MeanGn,Determinant,Trace,Bias) %>%
gather(pm, Value, c("Determinant",
"Trace",
"Bias")) %>%
mutate(pm = factor(pm, levels = c("Determinant",
"Trace",
"Bias"))) %>%
spread(Type,Value) %>%
ungroup() %>%
mutate("PULSE05 to Fuller4" = pmap_dbl(.l=list(Ful4,PULSE05,pm), .f=function(Ful4,PULSE05,pm){ (Ful4-PULSE05)/PULSE05 }),
"PULSE05 to Fuller1"  = pmap_dbl(.l=list(Ful1,PULSE05,pm), .f=function(Ful1,PULSE05,pm){ (Ful1-PULSE05)/PULSE05}),
"PULSE05 to OLS"  = pmap_dbl(.l=list(OLS,PULSE05,pm), .f=function(OLS,PULSE05,pm){ (OLS-PULSE05)/PULSE05}),
MinEigenMeanGn = map_dbl(.x= MeanGn,.f= function(x) {ifelse(is.double(eigen(x)$values),min(eigen(x)$values),NA)}),
MaxEigenMeanGn = map_dbl(.x= MeanGn,.f= function(x) {ifelse(is.double(eigen(x)$values),max(eigen(x)$values),NA)})) %>%
mutate(Superior = ifelse(Ful4<PULSE05,"Ful4","PULSE")) %>%
gather(Type,Value,c(-nModel,-nSim,-n,-MeanGn,-pm,-Ful1,-Ful4,-OLS,-PULSE05,-MinEigenMeanGn,-MaxEigenMeanGn,-Superior))
PlotData <- left_join(left_join(LossData,Optimal,by=c("n","nModel")) ,Rhosq,by=c("nModel"))
ggplot(data=PlotData) +
geom_hline(yintercept =0,color="black",linetype="solid") +
geom_vline(xintercept =log(15.5),color="black",linetype="dotted") +
geom_point(aes(x=log(MinEigenMeanGn),y=Value,color=sqrt(RhoSq)),alpha=0.5,size=0.8)+
scale_color_gradient(low = "blue", high = "orange")+
facet_wrap(    Type ~ pm ,scales="free_y",ncol=3, labeller = label_both)+
xlab(expression(log(lambda[min](hat(E)[N](G[n])))))+
labs(colour=expression("||"*rho*"||"[2]))+
ylab(expression(paste("Relative change of performance measure")))+
theme(plot.margin = unit(c(0,0.8,0,0), "cm"))+
theme(legend.position="bottom")
ggsave(paste0("Plots/Multivariate_VaryingConfounding_Beta-11_PULSE05_",ID,".png"), plot = last_plot(), device = NULL, path = NULL,
scale = 1, width = 12, height = 9, units = c("in"),
dpi = 200, limitsize = FALSE)
ggsave(paste0("Plots/Multivariate_VaryingConfounding_Beta-11_PULSE05_",ID,".eps"), plot = last_plot(), device = cairo_ps, path = NULL,
scale = 1, width = 12, height = 9, units = c("in"),
dpi = 200, limitsize = FALSE)
# # Read data normRho = 0.2,0.5,0.8, eta =0.2,0.8
Data_Location <- "Data/Experiment_Multivariate_FixedConfounding_nSim_5000_nObsPerSim_50_nModel_5000_20200720165943.RDS"
ID <- "20200720165943"
dat <- readRDS(file=Data_Location)
#Finding MSE superior models
Optimal <- dat %>%
select(n,nModel,Type,MSE,Cov) %>%
unique() %>%
spread(Type,MSE) %>%
rowwise() %>%
mutate(TrueSuperior = case_when( min(eigen(PULSE05-Ful4)$values) > 0 ~ "Ful4",
min(eigen(Ful4-PULSE05)$values) > 0 ~ "PULSE",
TRUE ~ "Not comparable")) %>%
select(n,nModel,Cov,TrueSuperior)
#Extracting models coefficients
Cors <- dat %>%
filter(Type=="Ful1") %>%
select(nModel,ModelCoefs,Cov) %>%
unnest(cols=c(ModelCoefs)) %>%
mutate(Coef = rep(c(
"xi11",
"xi12",
"xi21",
"xi22",
"phi1",
"phi2",
"eta"),30000)  ) %>%
unnest(cols=c(ModelCoefs)) %>%
spread(Coef,ModelCoefs) %>%
mutate(normRho = sqrt((phi1^2+phi2^2-2*eta*phi1*phi2)/(1-eta^2)))
# Calculating relative change in performance measures
LossData <- dat  %>%
select(nModel,Cov,nSim,n,Type,MeanGn,Determinant,Trace,Bias) %>%
gather(pm, Value, c("Determinant",
"Trace",
"Bias")) %>%
mutate(pm = factor(pm, levels = c("Determinant",
"Trace",
"Bias"))) %>%
spread(Type,Value) %>%
ungroup() %>%
mutate("PULSE05 to Fuller4" = pmap_dbl(.l=list(Ful4,PULSE05,pm), .f=function(Ful4,PULSE05,pm){ (Ful4-PULSE05)/PULSE05 }),
"PULSE05 to Fuller1"  = pmap_dbl(.l=list(Ful1,PULSE05,pm), .f=function(Ful1,PULSE05,pm){ (Ful1-PULSE05)/PULSE05}),
"PULSE05 to OLS"  = pmap_dbl(.l=list(OLS,PULSE05,pm), .f=function(OLS,PULSE05,pm){ (OLS-PULSE05)/PULSE05}),
MinEigenMeanGn = map_dbl(.x= MeanGn,.f= function(x) {ifelse(is.double(eigen(x)$values),min(eigen(x)$values),NA)}),
MaxEigenMeanGn = map_dbl(.x= MeanGn,.f= function(x) {ifelse(is.double(eigen(x)$values),max(eigen(x)$values),NA)})) %>%
mutate(Superior = ifelse(Ful4<PULSE05,"Ful4","PULSE")) %>%
gather(Type,Value,c(-nModel,-Cov,-nSim,-n,-MeanGn,-pm,-Ful1,-Ful4,-OLS,-PULSE05,-MinEigenMeanGn,-MaxEigenMeanGn,-Superior))
# Gathering Data for plot
PlotData <- left_join(left_join(LossData,Optimal,by=c("n","nModel","Cov")) ,Cors,by=c("nModel","Cov")) %>%
arrange(normRho,-eta) %>%
mutate(Label = paste0("'||'*rho*'||'[2]:'",sprintf("%.3f",normRho),"'~~eta:'",sprintf("%.3f",eta),"'~~phi[1]:'",sprintf("%.3f",phi1),"'~~phi[2]:'",sprintf("%.3f",phi2),"'"))
scaleFUN <- function(x) sprintf("%.2f", x)
PlotData %>% arrange(pm,nModel,Cov) %>% print(n=30)
p1 <- ggplot(data=PlotData %>% filter(Type=="PULSE05 to Fuller4",Cov %in% c(1))) +
geom_hline(yintercept =0,color="black",linetype="solid") +
geom_vline(xintercept =log(15.5),color="black",linetype="dotted") +
geom_point(aes(x=log(MinEigenMeanGn),y=Value),alpha=0.1,size=1)+
facet_wrap( Label ~ pm ,scales="free_y",ncol=3, labeller = label_parsed)+
xlab(expression(log(lambda[min](hat(E)[N](G[n])))))+
ylab(expression(paste("Relative change of performance measure")))+
theme(plot.margin = unit(c(0,0.8,0,0), "cm"))+
theme(axis.title.y = element_blank())+
theme(axis.title.x = element_blank())+ scale_y_continuous(labels=scaleFUN)+
scale_x_continuous(limits= c(0,5))
p2 <- ggplot(data=PlotData %>% filter(Type=="PULSE05 to Fuller4",Cov %in% c(2))) +
geom_hline(yintercept =0,color="black",linetype="solid") +
geom_vline(xintercept =log(15.5),color="black",linetype="dotted") +
geom_point(aes(x=log(MinEigenMeanGn),y=Value),alpha=0.1,size=1)+
facet_wrap(  Label ~ pm ,scales="free_y",ncol=3, labeller = label_parsed)+
xlab(expression(log(lambda[min](hat(E)[N](G[n])))))+
ylab(expression(paste("Relative change of performance measure")))+
theme(plot.margin = unit(c(0,0.8,0,0), "cm"))+
theme(axis.title.y = element_blank())+
theme(axis.title.x = element_blank())+ scale_y_continuous(labels=scaleFUN)+
scale_x_continuous(limits= c(0,5))
p3 <- ggplot(data=PlotData %>% filter(Type=="PULSE05 to Fuller4",Cov %in% c(3))) +
geom_hline(yintercept =0,color="black",linetype="solid") +
geom_vline(xintercept =log(15.5),color="black",linetype="dotted") +
geom_point(aes(x=log(MinEigenMeanGn),y=Value),alpha=0.1,size=1)+
facet_wrap(  Label ~ pm ,scales="free_y",ncol=3, labeller = label_parsed)+
xlab(expression(log(lambda[min](hat(E)[N](G[n])))))+
ylab(expression(paste("Relative change of performance measure")))+
theme(plot.margin = unit(c(0,0.8,0,0), "cm"))+
theme(axis.title.y = element_blank())+
theme(axis.title.x = element_blank())+ scale_y_continuous(labels=scaleFUN)+
scale_x_continuous(limits= c(0,5))
p4 <- ggplot(data=PlotData %>% filter(Type=="PULSE05 to Fuller4",Cov %in% c(4))) +
geom_hline(yintercept =0,color="black",linetype="solid") +
geom_vline(xintercept =log(15.5),color="black",linetype="dotted") +
geom_point(aes(x=log(MinEigenMeanGn),y=Value),alpha=0.1,size=1)+
facet_wrap(  Label ~ pm ,scales="free_y",ncol=3, labeller = label_parsed)+
theme(plot.margin = unit(c(0,0.8,0,0), "cm"))+
theme(axis.title.y = element_blank())+
theme(axis.title.x = element_blank())+ scale_y_continuous(labels=scaleFUN)+
scale_x_continuous(limits= c(0,5))
p5 <- ggplot(data=PlotData %>% filter(Type=="PULSE05 to Fuller4",Cov %in% c(5))) +
geom_hline(yintercept =0,color="black",linetype="solid") +
geom_vline(xintercept =log(15.5),color="black",linetype="dotted") +
geom_point(aes(x=log(MinEigenMeanGn),y=Value),alpha=0.1,size=1)+
facet_wrap(  Label ~ pm ,scales="free_y",ncol=3, labeller = label_parsed)+
theme(plot.margin = unit(c(0,0.8,0,0), "cm"))+
theme(axis.title.y = element_blank())+
theme(axis.title.x = element_blank())+ scale_y_continuous(labels=scaleFUN)+
scale_x_continuous(limits= c(0,5))
p6 <- ggplot(data=PlotData %>% filter(Type=="PULSE05 to Fuller4",Cov %in% c(6))) +
geom_hline(yintercept =0,color="black",linetype="solid") +
geom_vline(xintercept =log(15.5),color="black",linetype="dotted") +
geom_point(aes(x=log(MinEigenMeanGn),y=Value),alpha=0.1,size=1)+
facet_wrap(  Label ~ pm ,scales="free_y",ncol=3, labeller = label_parsed)+
xlab(expression(log(lambda[min](hat(E)[N](G[n])))))+
ylab(expression(paste("Relative change of performance measure")))+
theme(plot.margin = unit(c(0,0.8,0,0), "cm"))+
theme(axis.title.y = element_blank())+
scale_y_continuous(labels=scaleFUN)+
scale_x_continuous(limits= c(0,5))
plot <- arrangeGrob(p1,p2,p3,p4,p5,p6, ncol=1,left = textGrob("Relative Change in Performance Measure", rot = 90, vjust = 0))
ggsave(paste0("Plots/Multivariate_FixedConfounding_",ID,".png"), plot =plot, device = NULL, path = NULL,
scale = 1, width = 12, height = 13, units = c("in"),
dpi = 200, limitsize = FALSE)
ggsave(paste0("Plots/Multivariate_FixedConfounding_",ID,".eps"), plot =plot, device = cairo_ps, path = NULL,
scale = 1, width = 12, height = 13, units = c("in"),
dpi = 200, limitsize = FALSE)
cols <- c("OLS" = "red","Test" = "blue","TSLS" = "green4", "AR" = "dodgerblue1", "Path" = "black")
q <- qchisq(0.95,df=2)
datSublevel <- dat1 %>% filter(Type=="Test") %>% filter(Value <=5.991465)
K_class_fixed <- function(k){
W <- t(Z) %*% ((1-k)*diag(n)+k* P_A )  %*%Z
if(is.singular.matrix(W, tol = 1e-20))
{a <- "Inversion of Singular Matrix"}
else{
a <- solve(W) %*% t(Z) %*% ( (1-k)*diag(n) + k*P_A ) %*% Y
}
return(a)
}
K_class_path <- data.frame(k = seq(0,1,0.001)) %>%
rowwise() %>%
mutate(a = list(K_class_fixed(k))) %>%
ungroup() %>%
mutate(ID = seq(1,nrow(.),1)) %>%
unnest(cols=c(a)) %>%
group_by(ID) %>%
mutate(ID2 = c("alpha1","alpha2")) %>%
ungroup %>%
spread(ID2,a)
#t text
K_class_path_text <-data.frame(k = c(0.9366,0.9921)) %>%
rowwise() %>%
mutate(a = list(K_class_fixed(k))) %>%
ungroup() %>%
mutate(ID = seq(1,nrow(.),1)) %>%
unnest(cols=c(a)) %>%
group_by(ID) %>%
mutate(ID2 = c("alpha1","alpha2")) %>%
ungroup %>%
spread(ID2,a) %>%
rowwise() %>%
mutate(t = as.character(round(lIV(alpha1,alpha2),2)))
K_class_path_text <- bind_rows(K_class_path_text,
data.frame(k=NA,ID=NA,
alpha1 =alphaPval[1] ,
alpha2=alphaPval[2] ,
t="t*(p)"))
p1<- ggplot(data=dat1,aes(alpha1,alpha2))+
geom_raster(data=datSublevel, aes(x=alpha1, y=alpha2,fill="AR"),interpolate = TRUE,alpha=0.1)+
scale_fill_manual(values = cols,
name="Acceptance Region:",
labels=c(""))+
geom_contour(data=dat1 %>% filter(Type=="Test"),aes(z=Value,colour="Test"),breaks=c(2,4,5.99, 8,10,12,14,16,18,20))+
geom_contour(data=dat1 %>% filter(Type=="lIV"),aes(z=Value,colour="TSLS"),breaks=c(1,lIVinPval,3))+
geom_text_contour(data=dat1 %>% filter(Type=="Test") %>% mutate(Value=round(Value,digits=1)),aes(z = Value,group=Type),color="black")+
geom_contour(data=dat1 %>% filter(Type=="lOLS"),aes(z=Value,colour="OLS"),breaks=c(180,200,250,500))+
geom_path(data=K_class_path,aes(x=alpha1,y=alpha2,colour="Path"))+
geom_point(data=K_class_path_text ,aes(x=alpha1,y=alpha2),color="black",size=1)+
geom_text(data=K_class_path_text ,aes(x=alpha1,y=alpha2,label=t),hjust=-0.1, vjust=-0.2)+
geom_point(data=datOLS,color="red",size=1)+
geom_point(data=dat2SLS, color ="green4",size=1)+
geom_point(data=datPval, color ="black",size=1)+
scale_colour_manual(values = cols,
name = 'Levelsets and primal path:',
breaks = c("OLS","Test","TSLS","Path"),
labels=c(expression(~l[OLS]^n*(alpha)),
expression(~T[n](alpha)),
expression(~l[IV]^n*(alpha)),
expression(  "      "~bgroup("{",hat(alpha)[Pr]^n*(t):t%in%D[Pr],"}"))))+
xlab(expression(alpha[1]))+
ylab(expression(alpha[2]))+
theme_bw()+
theme(legend.position="bottom")+
scale_x_continuous(expand = c(0,0))+
scale_y_continuous(expand = c(0,0))
p2 <-ggplot(data=dat1,aes(alpha1,alpha2))+
geom_raster(data=datSublevel, aes(x=alpha1, y=alpha2,fill="AR"),interpolate = TRUE,alpha=0.1)+
scale_fill_manual(values = cols,
name="Acceptance Region:",
labels=c(""))+
geom_contour(data=dat1 %>% filter(Type=="Test"),aes(z=Value,colour="Test"),breaks=c(2,4,5.99, 8,10,12,14,16,18,20))+
geom_contour(data=dat1 %>% filter(Type=="lIV"),aes(z=Value,colour="TSLS"),breaks=c(1,lIVinPval,3))+
geom_text_contour(data=dat1 %>% filter(Type=="Test") %>% mutate(Value=round(Value,digits=1)),aes(z = Value,group=Type),color="black")+
geom_contour(data=dat1 %>% filter(Type=="lOLS"),aes(z=Value,colour="OLS"),breaks=c(lOLSinPval,180,200,250,500))+
geom_path(data=K_class_path,aes(x=alpha1,y=alpha2,colour="Path"))+
geom_point(data=K_class_path_text ,aes(x=alpha1,y=alpha2),color="black",size=1)+
geom_text(data=K_class_path_text ,aes(x=alpha1,y=alpha2,label=t),hjust=-0.1, vjust=-0.2)+
geom_point(data=datOLS,color="red",size=1)+
geom_point(data=dat2SLS, color ="green4",size=1)+
geom_point(data=datPval, color ="black",size=1)+
scale_colour_manual(values = cols,
name = 'Levelsets and primal path:',
breaks = c("OLS","Test","TSLS","Path"),
labels=c(expression(~l[OLS]^n*(alpha)),
expression(~T[n](alpha)),
expression(~l[IV]^n*(alpha)),
expression(  "     "~bgroup("{",hat(alpha)[Pr]^n*(t):t%in%D[Pr],"}"))))+
xlab(expression(alpha[1]))+
ylab(expression(alpha[2]))+
theme_bw()+
theme(legend.position="bottom")+
scale_x_continuous(expand = c(0,0),limits=c(3,5))+
scale_y_continuous(expand = c(0,0),limits= c(0,1.5))
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
mylegend<-g_legend(p1)
p3 <- grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
p2 + theme(legend.position="none"),
nrow=1),
mylegend, nrow=2,heights=c(10, 0.5))
ggsave(filename="Plots/Levelsets_Test_OLS_IV_Combined.pdf", plot = p3, device = NULL, path = NULL,
scale = 1, width = 12, height = 6, units = c("in"),
dpi = 200)
ggsave(filename="Plots/Levelsets_Test_OLS_IV_Combined.eps", plot = p3, device = cairo_ps, path = NULL,
scale = 1, width = 12, height = 6, units = c("in"),
dpi = 200)
library(MASS) # mvrnorm
library(matrixcalc)
library(stats)
library(lqmm) #makepositive.
library(expm) #sqrtm A=SS
library(furrr)
library(tidyverse)
library(metR)
library(gridExtra)
library(rlang)
library(stringr)
source("Estimators_Fast.R")
EXX <- 2
EXA <- 1
EAX <- EXA
EAA <- 1
EXY <- 2.5
EAY <- 1
PopTSLS <- (EXA*EAA^(-1)*EAX)^(-1)*EXA*(EAA)^(-1)*EAY
PopOLS <- (EXX)^(-1)*EXY
PopK1o2 <- ((1-1/2)*EXX+(1/2)*EXA*EAA^(-1)*EAX)^(-1)*((1-1/2)*EXY+(1/2)*EXA*(EAA)^(-1)*EAY)
PopK3o4 <- ((1-3/4)*EXX+(3/4)*EXA*EAA^(-1)*EAX)^(-1)*((1-3/4)*EXY+(3/4)*EXA*(EAA)^(-1)*EAY)
PopK8o9 <- ((1-8/9)*EXX+(8/9)*EXA*EAA^(-1)*EAX)^(-1)*((1-8/9)*EXY+(8/9)*EXA*(EAA)^(-1)*EAY)
MSE <- function(coef,InstStrength){
InstStrength^2 + 3+ InstStrength^2*coef^2+coef^2-2*InstStrength^2*coef-2*coef -2*0.5*coef
}
######### n=2000 #########
set.seed(1)
temp <- list()
for(i in 1: 50){
n<- 2000
A <- rnorm(n,mean=0,sd=1)
U <- mvrnorm(n,mu=c(0,0),Sigma=matrix(c(1,0.5,0.5,1),ncol=2))
X <-A + U[,1]
Y <-X+ U[,2]
Z <- X
P_A <- A%*%solve(t(A)%*%A)%*%t(A)
temp[i] <- list(data.frame(
TSLS = K_class(1,Z=Z,Y,n,P_A) %>% as.numeric(),
OLS = solve(t(Z)%*%Z)%*%t(Z)%*%Y %>% as.numeric(),
K3o4 = K_class(3/4,Z=Z,Y,n,P_A) %>% as.numeric())
)
}
IDs <- temp %>% bind_rows() %>%
mutate(.,ID=seq(1,nrow(.),1)) %>%
bind_rows(.,data.frame(TSLS = 1, OLS = 1.25,K3o4= 1.1, ID=9999)) %>%
gather(Type,Coef, c(-ID)) %>%
expand_grid(InstStrength=as.integer(seq(0,10000,1))) %>%
rowwise() %>%
mutate(MSE = MSE(Coef,InstStrength/100) ,
InstStrength = abs(InstStrength)) %>%
arrange(Type,Coef,ID,InstStrength) %>%
ungroup %>%
group_by(Type,Coef,ID) %>%
mutate(SupMSE=cummax(MSE)) %>%
unique() %>%
ungroup %>%
select(-MSE,-Coef) %>%
arrange(ID,InstStrength,SupMSE) %>%
ungroup %>%
group_by(ID,InstStrength) %>%
filter(SupMSE == min(SupMSE)) %>%
ungroup %>%
group_by(ID,Type) %>%
filter(InstStrength == min(InstStrength)|
InstStrength == max(InstStrength)) %>%
mutate(Length = max(InstStrength)-min(InstStrength))
IDs %>% print(.,n=200)
IDs %>% filter(ID %in% c(13,3,9999)) %>% print
temp %>%
bind_rows() %>%
mutate(.,ID=seq(1,nrow(.),1)) %>%
bind_rows(.,data.frame(TSLS = 1, OLS = 1.25,K3o4= 1.1, ID=9999)) %>%
gather(Type,Coef,c(-ID)) %>%
expand_grid(InstStrength=seq(-600,600,1)) %>%
rowwise() %>%
mutate(MSE = MSE(Coef,InstStrength/100) ,
InstStrength = abs(InstStrength)) %>%
arrange(Type,Coef,InstStrength) %>%
group_by(Type,Coef) %>%
mutate(SupMSE=cummax(MSE)) %>%
group_by(Type,Coef,InstStrength) %>%
unique() %>%
ungroup %>%
mutate(Type=ifelse(Type=="K3o4","kappa=3/4",Type)) %>%
{
ggplot(data=.) +
geom_line(aes(x=InstStrength/100,y=SupMSE,color=Type,group = Coef),alpha=0.2)+
geom_line(data=. %>% filter(ID==13),aes(x=InstStrength/100,y=SupMSE,color=Type,group = Coef),size=0.8,alpha=1,linetype="dotted")+
geom_line(data=. %>% filter(ID==3),aes(x=InstStrength/100,y=SupMSE,color=Type,group = Coef),size=0.8,alpha=1,linetype="dashed")+
geom_line(data=. %>% filter(ID==9999),aes(x=InstStrength/100,y=SupMSE,group = Coef),color="black",size=0.5,alpha=0.9)+
ylab("Worst case mean squared prediction error")+
xlab("Maximum Intervention Strength sup|v|")+
coord_cartesian(ylim=c(0.8, 1.2))+
theme(plot.margin = unit(c(0,0.2,0,0), "cm"))+
scale_x_continuous(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0))+
theme(legend.position = "bottom")
}
ggsave("Plots/Dist_Robustness.png", plot = last_plot(), device = NULL, path = NULL,
scale = 1, width = 12, height = 6, units = c("in"),
dpi = 200, limitsize = FALSE)
ggsave("Plots/Dist_Robustness.png", plot = last_plot(), device = NULL, path = NULL,
scale = 1, width = 12, height = 6, units = c("in"),
dpi = 200, limitsize = FALSE)
ggsave("Plots/Dist_Robustness.eps", plot = last_plot(), device = cairo_ps, path = NULL,
scale = 1, width = 12, height = 6, units = c("in"),
dpi = 200, limitsize = FALSE)
