temp %>%
bind_rows() %>%
mutate(.,ID=seq(1,nrow(.),1)) %>%
filter(ID %in%
{IDs %>%   summarise( Length = (max(InstStrength)-min(InstStrength))) %>%
spread(Type,Length) %>%
select(ID,OLS,K3o4,TSLS) %>%
filter(is.na(TSLS))  %>%
pull(ID)}
)  %>%
mutate(dist = K3o4 -TSLS )
temp %>%
bind_rows() %>%
mutate(.,ID=seq(1,nrow(.),1)) %>%
mutate(dist = K3o4 -TSLS )
set.seed(1)
temp <- list()
for(i in 1: 50){
n<- 2000
A <- rnorm(n,mean=0,sd=1)
U <- mvrnorm(n,mu=c(0,0),Sigma=matrix(c(1,0.5,0.5,1),ncol=2))
X <-A + U[,1]
Y <-X+ U[,2]
Z <- X
P_A <- A%*%solve(t(A)%*%A)%*%t(A)
temp[i] <- list(data.frame(
TSLS = K_class(1,Z=Z,Y,n,P_A) %>% as.numeric(),
OLS = solve(t(Z)%*%Z)%*%t(Z)%*%Y %>% as.numeric(),
K3o4 = K_class(3/4,Z=Z,Y,n,P_A) %>% as.numeric())
)
}
IDs <- temp %>% bind_rows() %>%
mutate(.,ID=seq(1,nrow(.),1)) %>%
bind_rows(.,data.frame(TSLS = 1, OLS = 1.25,K3o4= 1.1, ID=9999)) %>%
gather(Type,Coef, c(-ID)) %>%
expand_grid(InstStrength=as.integer(seq(0,10000,1))) %>%
rowwise() %>%
mutate(MSE = MSE(Coef,InstStrength/100) ,
InstStrength = abs(InstStrength)) %>%
arrange(Type,Coef,ID,InstStrength) %>%
ungroup %>%
group_by(Type,Coef,ID) %>%
mutate(SupMSE=cummax(MSE)) %>%
unique() %>%
ungroup %>%
select(-MSE,-Coef) %>%
arrange(ID,InstStrength,SupMSE) %>%
ungroup %>%
group_by(ID,InstStrength) %>%
filter(SupMSE == min(SupMSE)) %>%
ungroup %>%
group_by(ID,Type) %>%
filter(InstStrength == min(InstStrength)|
InstStrength == max(InstStrength)) %>%
mutate(Length = max(InstStrength)-min(InstStrength))
IDs %>% print(.,n=200)
IDs %>% filter(ID %in% c(13,3,9999)) %>% print
temp %>%
bind_rows() %>%
mutate(.,ID=seq(1,nrow(.),1)) %>%
bind_rows(.,data.frame(TSLS = 1, OLS = 1.25,K3o4= 1.1, ID=9999)) %>%
gather(Type,Coef,c(-ID)) %>%
expand_grid(InstStrength=seq(-600,600,1)) %>%
rowwise() %>%
mutate(MSE = MSE(Coef,InstStrength/100) ,
InstStrength = abs(InstStrength)) %>%
arrange(Type,Coef,InstStrength) %>%
group_by(Type,Coef) %>%
mutate(SupMSE=cummax(MSE)) %>%
group_by(Type,Coef,InstStrength) %>%
unique() %>%
ungroup %>%
mutate(Type=ifelse(Type=="K3o4","kappa=3/4",Type)) %>%
{
ggplot(data=.) +
geom_line(aes(x=InstStrength/100,y=SupMSE,color=Type,group = Coef),alpha=0.2)+
geom_line(data=. %>% filter(ID==13),aes(x=InstStrength/100,y=SupMSE,color=Type,group = Coef),size=0.8,alpha=1,linetype="dotted")+
geom_line(data=. %>% filter(ID==3),aes(x=InstStrength/100,y=SupMSE,color=Type,group = Coef),size=0.8,alpha=1,linetype="dashed")+
geom_line(data=. %>% filter(ID==9999),aes(x=InstStrength/100,y=SupMSE,group = Coef),color="black",size=0.5,alpha=0.9)+
ylab("Worst case mean squared prediction error")+
xlab("Maximum Intervention Strength sup|v|")+
coord_cartesian(ylim=c(0.8, 1.2))+
theme(plot.margin = unit(c(0,0.2,0,0), "cm"))+
scale_x_continuous(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0))+
theme(legend.position = "bottom")
}
IDs <- temp %>% bind_rows() %>%
mutate(.,ID=seq(1,nrow(.),1)) %>%
bind_rows(.,data.frame(TSLS = 1, OLS = 1.25,K3o4= 1.1, ID=9999)) %>%
gather(Type,Coef, c(-ID)) %>%
expand_grid(InstStrength=as.integer(seq(0,10000,1))) %>%
rowwise() %>%
mutate(MSE = MSE(Coef,InstStrength/100) ,
InstStrength = abs(InstStrength)) %>%
arrange(Type,Coef,ID,InstStrength) %>%
ungroup %>%
group_by(Type,Coef,ID) %>%
mutate(SupMSE=cummax(MSE)) %>%
unique() %>%
ungroup %>%
select(-MSE,-Coef) %>%
arrange(ID,InstStrength,SupMSE) %>%
ungroup %>%
group_by(ID,InstStrength) %>%
filter(SupMSE == min(SupMSE)) %>%
ungroup %>%
group_by(ID,Type) %>%
filter(InstStrength == min(InstStrength)|
InstStrength == max(InstStrength)) %>%
mutate(Length = max(InstStrength)-min(InstStrength))
IDs <- temp %>% bind_rows() %>%
mutate(.,ID=seq(1,nrow(.),1)) %>%
bind_rows(.,data.frame(TSLS = 1, OLS = 1.25,K3o4= 1.1, ID=9999)) %>%
gather(Type,Coef, c(-ID)) %>%
expand_grid(InstStrength=as.integer(seq(0,10000,1))) %>%
rowwise() %>%
mutate(MSE = MSE(Coef,InstStrength/100) ,
InstStrength = abs(InstStrength)) %>%
arrange(Type,Coef,ID,InstStrength) %>%
ungroup %>%
group_by(Type,Coef,ID) %>%
mutate(SupMSE=cummax(MSE)) %>%
unique() %>%
ungroup %>%
select(-MSE,-Coef) %>%
arrange(ID,InstStrength,SupMSE) %>%
ungroup %>%
group_by(ID,InstStrength) %>%
filter(SupMSE == min(SupMSE)) %>%
ungroup %>%
group_by(ID,Type) %>%
filter(InstStrength == min(InstStrength)|
InstStrength == max(InstStrength)) %>%
mutate(Length = max(InstStrength)-min(InstStrength))
IDs %>% print(.,n=200)
IDs %>% filter(ID %in% c(13,3,9999)) %>% print
temp %>%
bind_rows() %>%
mutate(.,ID=seq(1,nrow(.),1)) %>%
bind_rows(.,data.frame(TSLS = 1, OLS = 1.25,K3o4= 1.1, ID=9999)) %>%
gather(Type,Coef,c(-ID)) %>%
expand_grid(InstStrength=seq(-600,600,1)) %>%
rowwise() %>%
mutate(MSE = MSE(Coef,InstStrength/100) ,
InstStrength = abs(InstStrength)) %>%
arrange(Type,Coef,InstStrength) %>%
group_by(Type,Coef) %>%
mutate(SupMSE=cummax(MSE)) %>%
group_by(Type,Coef,InstStrength) %>%
unique() %>%
ungroup %>%
mutate(Type=ifelse(Type=="K3o4","kappa=3/4",Type)) %>%
{
ggplot(data=.) +
geom_line(aes(x=InstStrength/100,y=SupMSE,color=Type,group = Coef),alpha=0.2)+
geom_line(data=. %>% filter(ID==13),aes(x=InstStrength/100,y=SupMSE,color=Type,group = Coef),size=0.8,alpha=1,linetype="dotted")+
geom_line(data=. %>% filter(ID==3),aes(x=InstStrength/100,y=SupMSE,color=Type,group = Coef),size=0.8,alpha=1,linetype="dashed")+
geom_line(data=. %>% filter(ID==9999),aes(x=InstStrength/100,y=SupMSE,group = Coef),color="black",size=0.5,alpha=0.9)+
ylab("Worst case mean squared prediction error")+
xlab("Maximum Intervention Strength sup|v|")+
coord_cartesian(ylim=c(0.8, 1.2))+
theme(plot.margin = unit(c(0,0.2,0,0), "cm"))+
scale_x_continuous(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0))+
theme(legend.position = "bottom")
}
ggsave("Plots/Dist_Robustness.png", plot = last_plot(), device = NULL, path = NULL,
scale = 1, width = 12, height = 6, units = c("in"),
dpi = 200, limitsize = FALSE)
source("Estimators_Fast.R")
i <- 0.1
a <- i*matrix(c(5,2,2,3),ncol=2)
delta <- matrix(c(1,3,2,10),ncol=2)
beta <- matrix(c(1,1),ncol=1)
mu <- matrix(c(15,4),ncol=1)
set.seed(5)
n <- 500
dA <- 2
dX <- 2
dZ <- 2
A <- mvrnorm(n,mu=c(0,0),Sigma=matrix(c(1,0,0,1),ncol=2,byrow=TRUE))
H <- mvrnorm(n,mu=c(0,0),Sigma=matrix(c(1,0,0,1),ncol=2,byrow=TRUE))
X <- A%*%a+H%*%delta + mvrnorm(n,mu=c(0,0),Sigma=matrix(c(1,0,0,1),ncol=2,byrow=TRUE))
Y <- X%*%beta+H%*%mu + rnorm(n)
Z <- cbind(X)
P_A <- A%*%solve(t(A)%*%A)%*%t(A)
YtP_AY <- t(Y)%*%P_A%*%Y
ZtP_AZ <- t(Z)%*%P_A%*%Z
YtP_AZ <- t(Y)%*%P_A%*%Z
YtY <- t(Y)%*%Y
ZtZ <- t(Z)%*%Z
YtZ <- t(Y)%*%Z
alphaPval <- BinarySearch(A,Z,Y,dZ,dA,p=0.05,N=1000000,n=n,YtP_AY,ZtP_AZ,YtP_AZ,YtY,ZtZ,YtZ,P_A)
BinarySearch(Z,Y,dZ,dA,p=0.05,N=1000000,n,YtP_AY,ZtP_AZ,YtP_AZ,YtY,ZtZ,YtZ,P_A,A_1,X)
alphaPval <- BinarySearch(Z,Y,dZ,dA,p=0.05,N=1000000,n,YtP_AY,ZtP_AZ,YtP_AZ,YtY,ZtZ,YtZ,P_A,A_1,X)
n*lIV(3.7753632,0.8560511)/lOLS(3.7753632,0.8560511)
lOLS <- function(a1,a2) {
return(n^(-1)*t(Y-Z%*%c(a1,a2))%*%(Y-Z%*%c(a1,a2)))
}
lIV <- function(a1,a2) {
return(n^(-1)*t(Y-Z%*%c(a1,a2))%*%P_A%*%(Y-Z%*%c(a1,a2)))
}
T <- function(a1,a2) { n*lIV(a1,a2)/lOLS(a1,a2)}
dat1 <- expand_grid(alpha1=seq(-4,7,0.01),alpha2=seq(-2,5,0.01)) %>%
rowwise() %>%
mutate(lOLS = lOLS(alpha1,alpha2),
lIV = lIV(alpha1,alpha2),
Test = n*lIV/lOLS) %>%
gather(Type,Value,c(lOLS,lIV,Test))
alphaOLS = solve(t(Z)%*%Z)%*%t(Z)%*%Y
datOLS <- data.frame(alpha1=alphaOLS[1],alpha2=alphaOLS[2])
alpha2SLS <- K_class(1,Z,A,Y,n,P_A)
alpha2SLS <- K_class(1,Z,Y,n,P_A)
dat2SLS <- data.frame(alpha1=alpha2SLS[1],alpha2=alpha2SLS[2])
datPval <- data.frame(alpha1=alphaPval[1],alpha2=alphaPval[2])
lOLSinPval <- lOLS(alphaPval[1],alphaPval[2])
lIVinPval <- lIV(alphaPval[1],alphaPval[2])
datTrue <-  data.frame(alpha1=1,alpha2=1)
cols <- c("OLS" = "red","Test" = "blue","TSLS" = "green4", "AR" = "dodgerblue1")
q <- qchisq(0.95,df=2)
datSublevel <- dat1 %>% filter(Type=="Test") %>% filter(Value <=5.991465)
p1<- ggplot(data=dat1,aes(alpha1,alpha2))+
geom_raster(data=datSublevel, aes(x=alpha1, y=alpha2,fill="AR"),interpolate = TRUE,alpha=0.1)+
scale_fill_manual(values = cols,
name="Acceptance Region:",
labels=c(""))+
geom_contour(data=dat1 %>% filter(Type=="Test"),aes(z=Value,colour="Test"),breaks=c(2,4,q, 8,10,12,14,16,18,20))+
geom_text_contour(data=dat1 %>% filter(Type=="Test") %>% mutate(Value=round(Value,digits=1)),aes(z = Value,group=Type),color="black")+
geom_contour(data=dat1 %>% filter(Type=="lOLS"),aes(z=Value,colour="OLS"),breaks=c(180,200,250,500))+
geom_point(data=datOLS,color="red",size=0.05)+
scale_colour_manual(values = cols,
name = 'Levelsets:',
labels=c(expression(~l[OLS]^n*(alpha)),
expression(~T[n](alpha)),
expression(l[IV](alpha))))+
xlab(expression(alpha[1]))+
ylab(expression(alpha[2]))+
theme_bw()+
scale_x_continuous(expand = c(0,0))+
scale_y_continuous(expand = c(0,0))+
theme(legend.position="bottom")
p2 <-ggplot(data=dat1,aes(alpha1,alpha2))+
geom_raster(data=datSublevel, aes(x=alpha1, y=alpha2,fill="AR"),interpolate = TRUE,alpha=0.1)+
scale_fill_manual(values = cols,
name="Acceptance Region:",
labels=c(""))+
geom_contour(data=dat1 %>% filter(Type=="Test"),aes(z=Value,colour="Test"),breaks=c(2,4,5.99, 8,10,12,14,16,18,20))+
geom_text_contour(data=dat1 %>% filter(Type=="Test") %>% mutate(Value=round(Value,digits=1)),aes(z = Value,group=Type),color="black")+
geom_contour(data=dat1 %>% filter(Type=="lOLS"),aes(z=Value,colour="OLS"),breaks=c(lOLSinPval,180,200,250,500))+
geom_point(data=datOLS,color="red",size=0.05)+
scale_colour_manual(values = cols,
name = 'Levelsets:',
labels=c(expression(~l[OLS]^n*(alpha)),
expression(~T[n](alpha)),
expression(l[IV](alpha))))+
xlab(expression(alpha[1]))+
ylab(expression(alpha[2]))+
theme_bw()+
theme(legend.position="bottom")+
scale_x_continuous(expand = c(0,0),limits=c(3,5))+
scale_y_continuous(expand = c(0,0),limits= c(0,1.5))
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
mylegend<-g_legend(p1)
p3 <- grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
p2 + theme(legend.position="none"),
nrow=1),
mylegend, nrow=2,heights=c(10, 0.5))
ggsave(filename="Plots/Levelsets_Test_OLS.pdf", plot = p3, device = NULL, path = NULL,
scale = 1, width = 12, height = 6, units = c("in"),
dpi = 200)
cols <- c("OLS" = "red","Test" = "blue","TSLS" = "green4", "AR" = "dodgerblue1")
q <- qchisq(0.95,df=2)
p1<- ggplot(data=dat1,aes(alpha1,alpha2))+
geom_raster(data=datSublevel, aes(x=alpha1, y=alpha2,fill="AR"),interpolate = TRUE,alpha=0.1)+
scale_fill_manual(values = cols,
name="Acceptance Region:",
labels=c(""))+
geom_contour(data=dat1 %>% filter(Type=="Test"),aes(z=Value,colour="Test"),breaks=c(2,4,5.99, 8,10,12,14,16,18,20))+
geom_contour(data=dat1 %>% filter(Type=="lIV"),aes(z=Value,colour="TSLS"),breaks=c(1,lIVinPval,3))+
geom_text_contour(data=dat1 %>% filter(Type=="Test") %>% mutate(Value=round(Value,digits=1)),aes(z = Value,group=Type),color="black")+
geom_contour(data=dat1 %>% filter(Type=="lOLS"),aes(z=Value,colour="OLS"),breaks=c(180,200,250,500))+
geom_point(data=datOLS,color="red",size=1)+
geom_point(data=dat2SLS, color ="green4",size=1)+
geom_point(data=datPval, color ="black",size=1)+
scale_colour_manual(values = cols,
name = 'Levelsets:',
labels=c(expression(~l[OLS]^n*(alpha)),
expression(~T[n](alpha)),
expression(~l[IV]^n*(alpha))))+
xlab(expression(alpha[1]))+
ylab(expression(alpha[2]))+
theme_bw()+
theme(legend.position="bottom")+
scale_x_continuous(expand = c(0,0))+
scale_y_continuous(expand = c(0,0))
p2 <-ggplot(data=dat1,aes(alpha1,alpha2))+
geom_raster(data=datSublevel, aes(x=alpha1, y=alpha2,fill="AR"),interpolate = TRUE,alpha=0.1)+
scale_fill_manual(values = cols,
name="Acceptance Region:",
labels=c(""))+
geom_contour(data=dat1 %>% filter(Type=="Test"),aes(z=Value,colour="Test"),breaks=c(2,4,5.99, 8,10,12,14,16,18,20))+
geom_contour(data=dat1 %>% filter(Type=="lIV"),aes(z=Value,colour="TSLS"),breaks=c(1,lIVinPval,3))+
geom_text_contour(data=dat1 %>% filter(Type=="Test") %>% mutate(Value=round(Value,digits=1)),aes(z = Value,group=Type),color="black")+
geom_contour(data=dat1 %>% filter(Type=="lOLS"),aes(z=Value,colour="OLS"),breaks=c(lOLSinPval,180,200,250,500))+
geom_point(data=datOLS,color="red",size=1)+
geom_point(data=dat2SLS, color ="green4",size=1)+
geom_point(data=datPval, color ="black",size=1)+
scale_colour_manual(values = cols,
name = 'Levelsets:',
labels=c(expression(~l[OLS]^n*(alpha)),
expression(~T[n](alpha)),
expression(~l[IV]^n*(alpha))))+
xlab(expression(alpha[1]))+
ylab(expression(alpha[2]))+
theme_bw()+
theme(legend.position="bottom")+
scale_x_continuous(expand = c(0,0),limits=c(3,5))+
scale_y_continuous(expand = c(0,0),limits= c(0,1.5))
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
mylegend<-g_legend(p1)
p3 <- grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
p2 + theme(legend.position="none"),
nrow=1),
mylegend, nrow=2,heights=c(10, 0.5))
ggsave(filename="Plots/Levelsets_Test_OLS_IV.pdf", plot = p3, device = NULL, path = NULL,
scale = 1, width = 12, height = 6, units = c("in"),
dpi = 200)
K_class_fixed <- function(k){
W <- t(Z) %*% ((1-k)*diag(n)+k* P_A )  %*%Z
if(is.singular.matrix(W, tol = 1e-20))
{a <- "Inversion of Singular Matrix"}
else{
a <- solve(W) %*% t(Z) %*% ( (1-k)*diag(n) + k*P_A ) %*% Y
}
return(a)
}
K_class_path <- data.frame(k = seq(0,1,0.001)) %>%
rowwise() %>%
mutate(a = list(K_class_fixed(k))) %>%
ungroup() %>%
mutate(ID = seq(1,nrow(.),1)) %>%
unnest(cols=c(a)) %>%
group_by(ID) %>%
mutate(ID2 = c("alpha1","alpha2")) %>%
ungroup %>%
spread(ID2,a)
#t text
K_class_path_text <-data.frame(k = c(0.9366,0.9921)) %>%
rowwise() %>%
mutate(a = list(K_class_fixed(k))) %>%
ungroup() %>%
mutate(ID = seq(1,nrow(.),1)) %>%
unnest(cols=c(a)) %>%
group_by(ID) %>%
mutate(ID2 = c("alpha1","alpha2")) %>%
ungroup %>%
spread(ID2,a) %>%
rowwise() %>%
mutate(t = as.character(round(lIV(alpha1,alpha2),2)))
K_class_path_text <- bind_rows(K_class_path_text,
data.frame(k=NA,ID=NA,
alpha1 =alphaPval[1] ,
alpha2=alphaPval[2] ,
t="t*(p)"))
cols <- c("OLS" = "red","Test" = "blue","TSLS" = "green4", "AR" = "dodgerblue1", "Path" = "black")
p4 <- ggplot(data=dat1,aes(alpha1,alpha2))+
geom_raster(data=datSublevel, aes(x=alpha1, y=alpha2,fill="AR"),interpolate = TRUE,alpha=0.1)+
scale_fill_manual(values = cols,
name="Acceptance Region:",
labels=c(""))+
geom_contour(data=dat1 %>% filter(Type=="Test"),aes(z=Value,colour="Test"),breaks=c(2,4,5.99, 8,10,12,14,16,18,20),alpha=0.3)+
geom_contour(data=dat1 %>% filter(Type=="lIV"),aes(z=Value,colour="TSLS"),breaks=c(1,lIVinPval,3),alpha=0.3)+
geom_contour(data=dat1 %>% filter(Type=="lOLS"),aes(z=Value,colour="OLS"),breaks=c(180,200,250,500),alpha=0.3)+
geom_path(data=K_class_path,aes(x=alpha1,y=alpha2,colour="Path"))+
geom_point(data=K_class_path_text ,aes(x=alpha1,y=alpha2),color="black",size=1)+
geom_text(data=K_class_path_text ,aes(x=alpha1,y=alpha2,label=t),hjust=-0.1, vjust=-0.2)+
geom_point(data=datOLS,color="red",size=1)+
geom_point(data=dat2SLS, color ="green4",size=1)+
geom_point(data=datPval, color ="black",size=1)+
scale_colour_manual(values = cols,
name = 'Levelsets:',
breaks = c("OLS","Test","TSLS","Path"),
labels=c(expression(~l[OLS]^n*(alpha)),
expression(~T[n](alpha)),
expression(~l[IV]^n*(alpha)),
expression(  ~bgroup("{",hat(alpha)[Pr]^n*(t):t%in%D[Pr],"}"))))+
xlab(expression(alpha[1]))+
ylab(expression(alpha[2]))+
theme_bw()+
theme(legend.position="bottom")+
scale_x_continuous(expand=c(0,0),limits=c(-2,7),breaks=seq(-2,6,2))+
scale_y_continuous(expand=c(0,0),limits= c(-0,4),breaks=seq(0,4,2))
ggsave(filename="Plots/Levelsets_Test_OLS_IV_Path.pdf", plot = p4, device = NULL, path = NULL,
scale = 1, width = 12, height = 6, units = c("in"),
dpi = 200)
library(tidyverse)
library(dplyr)
library(magrittr)
library(stringr)
library(gridExtra)
########################################
####### Multivariate Experiments #######
#######  Selecting MSE superior  #######
########################################
#########################
#### Beta 00 PULSE05 ####
#########################
# Read data
Data_Location <- "Data/Experiment_Multivariate_VaryingConfounding_Beta00_PULSE05_nSim_5000_nObsPerSim_50_nModel_10000_20200716080129.RDS"
ID <- "20200716080129"
dat <- readRDS(file=Data_Location)
# Calculating MSE superiority percentages
Optimal <- dat %>%
select(n,nModel,Type,MSE) %>%
unique() %>%
spread(Type,MSE) %>%
rowwise() %>%
mutate(TrueSuperior = case_when( min(eigen(PULSE05-Ful4)$values) > 0 ~ "Ful4",
min(eigen(Ful4-PULSE05)$values) > 0 ~ "PULSE05",
TRUE ~ "Not comparable")) %>%
select(n,nModel,TrueSuperior)
# Extracting Model Coefficients from data
Coefs <- dat %>%
filter(Type=="Ful1") %>%
select(nModel,ModelCoefs) %>%
unnest(cols=c(ModelCoefs)) %>%
mutate(Coef = rep(c(
"xi11",
"xi12",
"xi21",
"xi22",
"delta11",
"delta12",
"delta21",
"delta22",
"mu11",
"mu22",
"VepX1" ,
"VepX2" ,
"rhosq"),10000)
) %>%
unnest(cols=c(ModelCoefs)) %>%
spread(Coef,ModelCoefs) %>%
rename(RhoSq=rhosq)
### Analysis of Initial Experiment:
# Read data
Data_Location <- "Data/Experiment_Multivariate_VaryingConfounding_Beta00_PULSE05_nSim_5000_nObsPerSim_50_nModel_10000_20200716080129.RDS"
ID <- "20200716080129"
dat <- readRDS(file=Data_Location)
# Calculating MSE superiority percentages
Optimal <- dat %>%
select(n,nModel,Type,MSE) %>%
unique() %>%
spread(Type,MSE) %>%
rowwise() %>%
mutate(TrueSuperior = case_when( min(eigen(PULSE05-Ful4)$values) > 0 ~ "Ful4",
min(eigen(Ful4-PULSE05)$values) > 0 ~ "PULSE05",
TRUE ~ "Not comparable"),
TrueSuperiorVsFul1 = case_when( min(eigen(PULSE05-Ful1)$values) > 0 ~ "Ful1",
min(eigen(Ful1-PULSE05)$values) > 0 ~ "PULSE05",
TRUE ~ "Not comparable"),
TrueSuperiorVsOLS = case_when( min(eigen(PULSE05-OLS)$values) > 0 ~ "OLS",
min(eigen(OLS-PULSE05)$values) > 0 ~ "PULSE05",
TRUE ~ "Not comparable")) %>%
select(n,nModel,TrueSuperior,TrueSuperiorVsFul1,TrueSuperiorVsOLS)
Ful4 <- Optimal %>%
group_by(TrueSuperior) %>%
summarise(count = n()) %>%
spread(TrueSuperior,count)
Ful1 <- Optimal %>%
group_by(TrueSuperiorVsFul1) %>%
summarise(count = n()) %>%
spread(TrueSuperiorVsFul1,count)
OLS <- Optimal %>%
group_by(TrueSuperiorVsOLS) %>%
summarise(count = n()) %>%
spread(TrueSuperiorVsOLS,count)
bind_rows(Ful4,Ful1,OLS) %>%
mutate_all(.funs=function(x){round(100*x/10000,1)}) %>%
# mutate_all(~replace(., is.na(.), 0.0)) %>%
mutate(Against = c("Fuller4","Fuller1","OLS"))
### Analysis of Experiment rerun on the optimal models from above:
Data_Location <- "Data/Experiment_Multivariate_VaryingConfounding_SuperiorModels_nSim_25000_nObsPerSim_50_20200716154413.RDS"
ID <- "20200716154413"
dat2 <- readRDS(file=Data_Location)
Optimal <- dat2 %>%
select(n,nModel,Type,MSE) %>%
unique() %>%
spread(Type,MSE) %>%
rowwise() %>%
mutate(TrueSuperior = case_when( min(eigen(PULSE05-Ful4)$values) > 0 ~ "Ful4",
min(eigen(Ful4-PULSE05)$values) > 0 ~ "PULSE05",
TRUE ~ "Not comparable"),
TrueSuperiorVsFul1 = case_when( min(eigen(PULSE05-Ful1)$values) > 0 ~ "Ful1",
min(eigen(Ful1-PULSE05)$values) > 0 ~ "PULSE05",
TRUE ~ "Not comparable"),
TrueSuperiorVsOLS = case_when( min(eigen(PULSE05-OLS)$values) > 0 ~ "OLS",
min(eigen(OLS-PULSE05)$values) > 0 ~ "PULSE05",
TRUE ~ "Not comparable")) %>%
select(n,nModel,TrueSuperior,TrueSuperiorVsFul1,TrueSuperiorVsOLS)
Optimal %>%
group_by(TrueSuperior) %>%
summarise(count = n())
