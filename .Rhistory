dA <- ncol(A)
dZ <- ncol(Z)
q <- stats::qchisq(1-p,df=dA, ncp=0,lower.tail = TRUE,log.p = FALSE)
UNDERID = FALSE
if(dX > dA){
UNDERID = TRUE
}
message <- NULL
stopBool = FALSE
if(UNDERID == FALSE){
if(Test_Statistic(Kclass(1,A,Z,Y),A,Z,Y)>= q){
message <- "Note: TSLS was rejected, reverting to Fuller(4)."
Fuller4Kappa <- Fuller_k(4,A,X,Y,A_inc)
coefs <- Kclass(Fuller4Kappa,A,Z,Y)
stopBool = TRUE
}
}
if (UNDERID == TRUE || stopBool == FALSE){
if(Test_Statistic(Kclass(0,A,Z,Y),A,Z,Y)<= q){
message <- "Note: OLS was accepted."
coefs <- Kclass(0,A,Z,Y)
} else {
lmax <- 2
lmin <- 0
while(Test_Statistic(Kclass_lambda(lmax,A,Z,Y),A,Z,Y)>q){
lmin <- lmax
lmax <- lmax^2
}
Delta <- lmax-lmin
while(Delta > 1/N || Accept == FALSE){
l <- (lmin+lmax)/2
alpha <- Kclass_lambda(l,A,Z,Y)
TestStatistic <- Test_Statistic(alpha,A,Z,Y)
if(TestStatistic>q){
Accept <- FALSE
lmin <- l
}
else {
Accept <- TRUE
lmax <- l
}
Delta <- lmax-lmin
}
coefs <- Kclass_lambda(lmax,A,Z,Y)
}
}
if(printsummary == TRUE){
if(UNDERID == FALSE){
coefficients <- colnames(Z)
ols <- Kclass(0,A,Z,Y)
tsls <- Kclass(1,A,Z,Y)
pulse <- coefs
fuller1 <- Kclass(Fuller_k(1,A,X,Y,A_inc),A,Z,Y)
fuller4 <- Kclass(Fuller_k(4,A,X,Y,A_inc),A,Z,Y)
liml <- Kclass(LIML_k(A,X,Y,A_inc),A,Z,Y)
d1 <- data.frame(coefficients,ols, pulse, tsls, liml, fuller1, fuller4) %>%
tidyr::pivot_longer(cols=-c(coefficients),names_to="method",values_to="coef") %>%
tidyr::pivot_wider(names_from=coefficients,values_from=coef) %>%
dplyr::mutate(Kclass_kappa = c(0,lmax/(1+lmax),1,LIML_k(A,X,Y,A_inc),Fuller_k(1,A,X,Y,A_inc),Fuller_k(4,A,X,Y,A_inc)),
Test_statistic = c(Test_Statistic(ols,A,Z,Y),
Test_Statistic(pulse,A,Z,Y),
Test_Statistic(tsls,A,Z,Y),
Test_Statistic(liml,A,Z,Y),
Test_Statistic(fuller1,A,Z,Y),
Test_Statistic(fuller4,A,Z,Y)
),
p.value =  stats::pchisq(Test_statistic,df=dA, ncp=0,lower.tail = FALSE,log.p = FALSE)) %>%
dplyr::mutate(dplyr::across(c(Kclass_kappa,Test_statistic,p.value) , ~ sprintf("%.10f", .x) ))
print(d1)
} else {
coefficients <- colnames(Z)
ols <- Kclass(0,A,Z,Y)
pulse <- coefs
fuller1 <- Kclass(Fuller_k(1,A,X,Y,A_inc),A,Z,Y)
fuller4 <- Kclass(Fuller_k(4,A,X,Y,A_inc),A,Z,Y)
d1 <- data.frame(coefficients,ols, pulse, fuller1, fuller4) %>%
tidyr::pivot_longer(cols=-c(coefficients),names_to="method",values_to="coef") %>%
tidyr::pivot_wider(names_from=coefficients,values_from=coef) %>%
dplyr::mutate(Kclass_kappa = c(0,lmax/(1+lmax),Fuller_k(1,A,X,Y,A_inc),Fuller_k(4,A,X,Y,A_inc)),
Test_statistic = c(Test_Statistic(ols,A,Z,Y),
Test_Statistic(pulse,A,Z,Y),
Test_Statistic(fuller1,A,Z,Y),
Test_Statistic(fuller4,A,Z,Y)
),
p.value =  stats::pchisq(Test_statistic,df=dA, ncp=0,lower.tail = FALSE,log.p = FALSE)) %>%
dplyr::mutate(dplyr::across(c(Kclass_kappa,Test_statistic,p.value) , ~ sprintf("%.10f", .x) ))
print(d1)
}
#Print a summary with estimator comparisons.
}
message(message)
return(coefs)
}
# Compute the PULSE estimate
PULSE(A = A, A_inc = NULL, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X1 <- 1.2*A+ 2*H + rnorm(n)
Y <- 0.1*X1+0.8*H+rnorm(n)
X2 <- 0.5*Y + rnorm(n)
X <- cbind(X1,X2)
# Compute the PULSE estimate
PULSE(A = A, A_inc = NULL, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X1 <- 1.2*A+ 2*H + rnorm(n)
Y <- 0.1*X1+0.8*H+rnorm(n)
X2 <- 0.5*Y + rnorm(n)
X <- cbind(X1,X2)
# Compute the PULSE estimate
PULSE(A = A, A_inc = NULL, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X1 <- 1.2*A+ 2*H + rnorm(n)
Y <- 0.1*X1+0.8*H+rnorm(n)
X2 <- 0.5*Y + rnorm(n)
X <- cbind(X1,X2)
# Compute the PULSE estimate
PULSE(A = A, A_inc = NULL, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X1 <- 1.2*A+ 2*H + rnorm(n)
Y <- 0.1*X1+0.8*H+rnorm(n)
X2 <- 0.5*Y + rnorm(n)
X <- cbind(X1,X2)
# Compute the PULSE estimate
PULSE(A = A, A_inc = NULL, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X1 <- 1.2*A+ 2*H + rnorm(n)
Y <- 0.1*X1+0.8*H+rnorm(n)
X2 <- 0.5*Y + rnorm(n)
X <- cbind(X1,X2)
# Compute the PULSE estimate
PULSE(A = A, A_inc = NULL, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X1 <- 1.2*A+ 2*H + rnorm(n)
Y <- 0.1*X1+0.8*H+rnorm(n)
X2 <- 0.5*Y + rnorm(n)
X <- cbind(X1,X2)
# Compute the PULSE estimate
PULSE(A = A, A_inc = NULL, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X1 <- 1.2*A+ 2*H + rnorm(n)
Y <- 0.1*X1+0.8*H+rnorm(n)
X2 <- 0.5*Y + rnorm(n)
X <- cbind(X1,X2)
# Compute the PULSE estimate
PULSE(A = A, A_inc = NULL, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X1 <- 1.2*A+ 2*H + rnorm(n)
Y <- 0.1*X1+0.8*H+rnorm(n)
X2 <- 0.5*Y + rnorm(n)
X <- cbind(X1,X2)
# Compute the PULSE estimate
PULSE(A = A, A_inc = NULL, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X1 <- 1.2*A+ 2*H + rnorm(n)
Y <- 0.1*X1+0.8*H+rnorm(n)
X2 <- 0.5*Y + rnorm(n)
X <- cbind(X1,X2)
# Compute the PULSE estimate
PULSE(A = A, A_inc = NULL, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X1 <- 1.2*A+ 2*H + rnorm(n)
Y <- 0.1*X1+0.8*H+rnorm(n)
X2 <- 0.5*Y + rnorm(n)
X <- cbind(X1,X2)
# Compute the PULSE estimate
PULSE(A = A, A_inc = NULL, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X1 <- 1.2*A+ 2*H + rnorm(n)
Y <- 0.1*X1+0.8*H+rnorm(n)
X2 <- 0.5*Y + rnorm(n)
X <- cbind(X1,X2)
# Compute the PULSE estimate
PULSE(A = A, A_inc = NULL, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X1 <- 1.2*A+ 2*H + rnorm(n)
Y <- 0.1*X1+0.8*H+rnorm(n)
X2 <- 0.5*Y + rnorm(n)
X <- cbind(X1,X2)
# Compute the PULSE estimate
PULSE(A = A, A_inc = NULL, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X1 <- 1.2*A+ 2*H + rnorm(n)
Y <- 0.1*X1+0.8*H+rnorm(n)
X2 <- 0.5*Y + rnorm(n)
X <- cbind(X1,X2)
# Compute the PULSE estimate
PULSE(A = A, A_inc = NULL, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X1 <- 1.2*A+ 2*H + rnorm(n)
Y <- 0.1*X1+0.8*H+rnorm(n)
X2 <- 0.5*Y + rnorm(n)
X <- cbind(X1,X2)
# Compute the PULSE estimate
PULSE(A = A, A_inc = NULL, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X1 <- 1.2*A+ 2*H + rnorm(n)
Y <- 0.1*X1+0.8*H+rnorm(n)
X2 <- 0.5*Y + rnorm(n)
X <- cbind(X1,X2)
# Compute the PULSE estimate
PULSE(A = A, A_inc = NULL, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X1 <- 1.2*A+ 2*H + rnorm(n)
Y <- 0.1*X1+0.8*H+rnorm(n)
X2 <- 0.5*Y + rnorm(n)
X <- cbind(X1,X2)
# Compute the PULSE estimate
PULSE(A = A, A_inc = NULL, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X <- 0.8*A + H + rnorm(n)
Y <- 0.5*X + H + rnorm(n)
# Compute the PULSE estimate
PULSE(A = A, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X <- 0.8*A + H + rnorm(n)
Y <- 0.5*X + H + rnorm(n)
# Compute the PULSE estimate
PULSE(A = A, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X <- 0.8*A + H + rnorm(n)
Y <- 0.5*X + H + rnorm(n)
# Compute the PULSE estimate
PULSE(A = A, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X <- 0.8*A + H + rnorm(n)
Y <- 0.5*X + H + rnorm(n)
# Compute the PULSE estimate
PULSE(A = A, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X <- 0.8*A + H + rnorm(n)
Y <- 0.5*X + H + rnorm(n)
# Compute the PULSE estimate
PULSE(A = A, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X <- 0.8*A + H + rnorm(n)
Y <- 0.5*X + H + rnorm(n)
# Compute the PULSE estimate
PULSE(A = A, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X <- 0.8*A + H + rnorm(n)
Y <- 0.5*X + H + rnorm(n)
# Compute the PULSE estimate
PULSE(A = A, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X <- 0.8*A + H + rnorm(n)
Y <- 0.5*X + H + rnorm(n)
# Compute the PULSE estimate
PULSE(A = A, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X <- 0.8*A + H + rnorm(n)
Y <- 0.5*X + H + rnorm(n)
# Compute the PULSE estimate
PULSE(A = A, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X <- 0.8*A + H + rnorm(n)
Y <- 0.5*X + H + rnorm(n)
# Compute the PULSE estimate
PULSE(A = A, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X <- 0.8*A + H + rnorm(n)
Y <- 0.5*X + H + rnorm(n)
# Compute the PULSE estimate
PULSE(A = A, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X <- 0.8*A + H + rnorm(n)
Y <- 0.5*X + H + rnorm(n)
# Compute the PULSE estimate
PULSE(A = A, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X <- 0.8*A + H + rnorm(n)
Y <- 0.5*X + H + rnorm(n)
# Compute the PULSE estimate
PULSE(A = A, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X <- 0.8*A + H + rnorm(n)
Y <- 0.5*X + H + rnorm(n)
# Compute the PULSE estimate
PULSE(A = A, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X <- 0.8*A + H + rnorm(n)
Y <- 0.5*X + H + rnorm(n)
# Compute the PULSE estimate
PULSE(A = A, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X <- 0.8*A + H + rnorm(n)
Y <- 0.5*X + H + rnorm(n)
# Compute the PULSE estimate
PULSE(A = A, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X <- 0.8*A + H + rnorm(n)
Y <- 0.5*X + H + rnorm(n)
# Compute the PULSE estimate
PULSE(A = A, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X <- 0.8*A + H + rnorm(n)
Y <- 0.5*X + H + rnorm(n)
# Compute the PULSE estimate
PULSE(A = A, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X <- 0.8*A + H + rnorm(n)
Y <- 0.5*X + H + rnorm(n)
# Compute the PULSE estimate
PULSE(A = A, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X <- 0.8*A + H + rnorm(n)
Y <- 0.5*X + H + rnorm(n)
# Compute the PULSE estimate
PULSE(A = A, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
PULSE <- function(A,X,Y, p = 0.05, N = 1000,A_inc = NULL,printsummary = FALSE){
A = as.matrix(A)
if(is.null(colnames(A))){colnames(A) <- paste0("A",seq(1,ncol(A),1))}
X = as.matrix(X)
if(is.null(colnames(X))){colnames(X) <- paste0("X",seq(1,ncol(X),1))}
Y = as.matrix(Y)
if(!is.null(A_inc)){
A_inc = as.matrix(A_inc)
if(is.null(colnames(A_inc))){colnames(A_inc) <- paste0("A_inc",seq(1,ncol(A_inc),1))}
Z = cbind(A_inc,X)
} else {
Z = X
}
if(is.null(colnames(Z))){colnames(Z) <- paste0("Z",seq(1,ncol(Z),1))}
n <- nrow(Y)
dX <- ncol(X)
dA <- ncol(A)
dZ <- ncol(Z)
q <- stats::qchisq(1-p,df=dA, ncp=0,lower.tail = TRUE,log.p = FALSE)
UNDERID = FALSE
if(dX > dA){
UNDERID = TRUE
}
message <- NULL
stopBool = FALSE
if(UNDERID == FALSE){
if(Test_Statistic(Kclass(1,A,Z,Y),A,Z,Y)>= q){
message <- "Note: TSLS was rejected, reverting to Fuller(4)."
Fuller4Kappa <- Fuller_k(4,A,X,Y,A_inc)
coefs <- Kclass(Fuller4Kappa,A,Z,Y)
stopBool = TRUE
}
}
if (UNDERID == TRUE || stopBool == FALSE){
if(Test_Statistic(Kclass(0,A,Z,Y),A,Z,Y)<= q){
message <- "Note: OLS was accepted."
coefs <- Kclass(0,A,Z,Y)
} else {
lmax <- 2
lmin <- 0
while(Test_Statistic(Kclass_lambda(lmax,A,Z,Y),A,Z,Y)>q){
lmin <- lmax
lmax <- lmax^2
}
Delta <- lmax-lmin
while(Delta > 1/N || Accept == FALSE){
l <- (lmin+lmax)/2
alpha <- Kclass_lambda(l,A,Z,Y)
TestStatistic <- Test_Statistic(alpha,A,Z,Y)
if(TestStatistic>q){
Accept <- FALSE
lmin <- l
}
else {
Accept <- TRUE
lmax <- l
}
Delta <- lmax-lmin
}
coefs <- Kclass_lambda(lmax,A,Z,Y)
}
}
if(printsummary == TRUE){
if(UNDERID == FALSE){
coefficients <- colnames(Z)
ols <- Kclass(0,A,Z,Y)
tsls <- Kclass(1,A,Z,Y)
pulse <- coefs
fuller1 <- Kclass(Fuller_k(1,A,X,Y,A_inc),A,Z,Y)
fuller4 <- Kclass(Fuller_k(4,A,X,Y,A_inc),A,Z,Y)
liml <- Kclass(LIML_k(A,X,Y,A_inc),A,Z,Y)
d1 <- data.frame(coefficients,ols, pulse, tsls, liml, fuller1, fuller4) %>%
tidyr::pivot_longer(cols=-c(coefficients),names_to="method",values_to="coef") %>%
tidyr::pivot_wider(names_from=coefficients,values_from=coef) %>%
dplyr::mutate(Kclass_kappa = c(0,lmax/(1+lmax),1,LIML_k(A,X,Y,A_inc),Fuller_k(1,A,X,Y,A_inc),Fuller_k(4,A,X,Y,A_inc)),
Test_statistic = c(Test_Statistic(ols,A,Z,Y),
Test_Statistic(pulse,A,Z,Y),
Test_Statistic(tsls,A,Z,Y),
Test_Statistic(liml,A,Z,Y),
Test_Statistic(fuller1,A,Z,Y),
Test_Statistic(fuller4,A,Z,Y)
),
p.value =  stats::pchisq(Test_statistic,df=dA, ncp=0,lower.tail = FALSE,log.p = FALSE)) %>%
dplyr::mutate(dplyr::across(-c(method) , ~ sprintf("%.10f", .x) ))
print(d1)
} else {
coefficients <- colnames(Z)
ols <- Kclass(0,A,Z,Y)
pulse <- coefs
fuller1 <- Kclass(Fuller_k(1,A,X,Y,A_inc),A,Z,Y)
fuller4 <- Kclass(Fuller_k(4,A,X,Y,A_inc),A,Z,Y)
d1 <- data.frame(coefficients,ols, pulse, fuller1, fuller4) %>%
tidyr::pivot_longer(cols=-c(coefficients),names_to="method",values_to="coef") %>%
tidyr::pivot_wider(names_from=coefficients,values_from=coef) %>%
dplyr::mutate(Kclass_kappa = c(0,lmax/(1+lmax),Fuller_k(1,A,X,Y,A_inc),Fuller_k(4,A,X,Y,A_inc)),
Test_statistic = c(Test_Statistic(ols,A,Z,Y),
Test_Statistic(pulse,A,Z,Y),
Test_Statistic(fuller1,A,Z,Y),
Test_Statistic(fuller4,A,Z,Y)
),
p.value =  stats::pchisq(Test_statistic,df=dA, ncp=0,lower.tail = FALSE,log.p = FALSE)) %>%
dplyr::mutate(dplyr::across(-c(method) , ~ sprintf("%.10f", .x) ))
print(d1)
}
#Print a summary with estimator comparisons.
}
message(message)
return(coefs)
}
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X <- 0.8*A + H + rnorm(n)
Y <- 0.5*X + H + rnorm(n)
# Compute the PULSE estimate
PULSE(A = A, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
library(PULSE)
n <- 500
A <- rnorm(n)
H <- rnorm(n)
X1 <- 1.2*A+ 2*H + rnorm(n)
Y <- 0.1*X1+0.8*H+rnorm(n)
X2 <- 0.5*Y + rnorm(n)
X <- cbind(X1,X2)
# Compute the PULSE estimate
PULSE(A = A, A_inc = NULL, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = FALSE)
# Compute the PULSE estimate
PULSE(A = A, A_inc = NULL, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
# Compute the PULSE estimate
PULSE(A = A, X = X, Y = Y ,p = 0.05, N = 1000, printsummary = TRUE)
devtools::document()
devtools::document()
library(PULSE)
